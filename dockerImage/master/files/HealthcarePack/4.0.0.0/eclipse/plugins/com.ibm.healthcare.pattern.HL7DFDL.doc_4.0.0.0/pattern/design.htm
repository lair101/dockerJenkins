<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" xml:lang="en-us">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="copyright" content="Copyright IBM Corporation 2013, 2014" />
<link rel="stylesheet" type="text/css" href="./css/pattern.css" />
<!-- 
    (C) COPYRIGHT International Business Machines Corp., 2013, 2014
    All Rights Reserved * Licensed Materials - Property of IBM
    -->
<title>Design of the Healthcare: HL7 to HL7 DFDL pattern</title>
</head>
<body role="main">
	<a name="links"></a>
	<div class="section">
		<h1 class="topictitle1">Design of the Healthcare: HL7 to HL7 DFDL
			pattern</h1>
		<p class="shortdesc">This pattern uses the HL7DFDLInput node to
			read incoming HL7 messages; no restrictions exist on the segments
			that you can include in a message, provided that the segments are
			present in the HL7 DFDL model that the pattern uses. The pattern can
			use the HL7v27, HL7v26 or HL7v251 DFDL libraries that are included
			in IBM Integration Bus Healthcare Pack. The HL7 DFDL library
			includes definitions of all segments that are valid and standard in
			HL7 version 2.5.1, 2.6, and 2.7. You can add additional Z-segments to
			this HL7 DFDL library. Z-segments are used by applications to send or
			receive data that is defined outside the HL7 specification.</p>
		<p>Sequence numbering, duplicate checking, and HL7 acknowledgment
			are carried out once, by the Receiver flow, on the source message.</p>
		<p>The Healthcare: HL7 to HL7 DFDL pattern defines the number of destinations to which an
			incoming message is distributed. For each destination, the message is
			processed, and filtering is applied. This filtering determines whether
			the message is required for the destination, and which of the
			segments in the source message to include in the output message.</p>
		<p>The Sender flow for each destination ensures that messages are
			sent in the correct sequence to the destination application.</p>
	</div>
	<div>
		<p>This topic contains the following sections:</p>
		<div>
			<a href="design.htm#source">Processing the source message by
				using the HL7DFDLInput node</a>
		</div>
		<div>
			<a href="design.htm#sequencing">Sequencing in the Receiver flow</a>
		</div>
		<div>
			<a href="design.htm#transform">Transformation and routing</a>
		</div>
		<div>
			<a href="design.htm#sending">Sender flows</a>
		</div>
		<div>
			<a href="design.htm#messageset">HL7 DFDL Library</a>
		</div>
		<div>
			<a href="design.htm#publish">Output from a pattern instance</a>
		</div>
	</div>
	<div class="section">
		<a name="source"></a>
		<h2>Processing the source message by using the HL7DFDLInput node</h2>
		<p>An input message is initially read by the HL7DFDLInput node in
			the Receiver flow as a BLOB message. Before parsing, the leading MLLP
			bytes are removed. If the leading byte is not found, the message is
			rejected because the sender is not following MLLP protocol, the
			connection is closed, and a negative acknowledgment (NACK) response
			message is sent.</p>
		<p>
			The HL7DFDLInput node parses the message according to the HL7 message
			definition in the HL7 DFDL library; see <a href="resources.htm">Resources
				for the <span> Healthcare: HL7 to HL7 DFDL </span> pattern</a>. All
			segments are read, and if any segment has additional fields, these
			fields are placed in a Remainder field for that segment.
		</p>
		<h3>Message validation</h3>
		<p>No standard validation of message data is used in the Receiver
			flow. However, the presence of the following specific HL7 data fields
			in the MSH segment is confirmed, because these fields are required
			for processing to continue:</p>
		<ul>
			<li>MSH.1.FieldSeparator</li>
			<li>MSH.2.SeviceString</li>
			<li>MSH.3.SendingApplication</li>
			<li>MSH4.SendingFacility</li>
			<li>MSH.10.MessageControlID</li>
			<li>MSH.11.ProcessingID</li>
			<li>MSH.12.VersionID</li>
		</ul>
		<h3>Duplicate processing option</h3>
		<p>Each incoming HL7 message has a MessageControlID field in the
			MSH header segment that identifies the record.</p>
		<p>The pattern parameters that control duplicate checking are used
			to set the equivalent properties on the HL7DFDLInput node.</p>
		<p>
			If the <span class="uicontrol"> Check duplicates </span> check box in
			the IBM Integration Toolkit is selected, all identifiers are
			stored on the duplicate queue together with the acknowledgment (ACK)
			that was returned to the sender. The identifier of an incoming
			message is checked against the saved identifiers to determine if it
			is a duplicate.
		</p>
		<p>When a duplicate is detected, it is not processed, but the same
			acknowledgment that was sent with the first message is returned to
			the sender.</p>
		<p>Identifiers are stored on the duplicate queue for a given time,
			after which they are deleted and messages with the same identifier
			are no longer treated as duplicates. The default time period for
			storing message identifiers is 24 hours, but you can change the time
			by using a pattern parameter. The duplicate queue must be sized to
			contain the peak number of message identifiers expected in the set
			time period.</p>
		<p>If an incoming message is not a duplicate, the message is
			passed through the Out terminal of the HL7DFDLInput node for further
			processing.</p>
		<p>If a duplicate is detected, the HL7DFDLInput node returns the
			ACK to the requester. If duplicate reporting is selected and a
			duplicate is detected, or if any other error occurs in the
			HL7DFDLInput node, the message is passed to the Failure terminal and
			the environment contains a description of the error.</p>
	</div>
	<p></p>
	<a name="sequencing"></a>
	<h3>Sequencing in the Receiver flow</h3>
	<p>
		The <span class="msobjprop"> Sequence numbers </span> parameter
		determines how the Receiver flow assigns sequence numbers to an input
		message to ensure that messages are delivered in the correct order.
	</p>
	<p>Three options are available for assigning sequence numbers:</p>
	<ul>
		<li><span class="msobjpropval"> Arrival based </span> This is the
			default option. The integration node assigns sequence numbers as messages
			arrive. The Receiver flow must be deployed as a single threaded flow
			so that messages arrive, and are assigned sequence numbers, in the
			order that they were sent by the source application.</li>
		<li><span class="msobjpropval"> Content based </span> Uses the
			sequence number included in the HL7 MSH segment. You can select this
			option if the source application is known to reliably complete this
			field.</li>
		<li><span class="msobjpropval"> No sequencing </span> If you do
			not require messages to be delivered in sequence to any of the
			destinations, select this option so that Sequence nodes are not
			included in the Receiver message flow.</li>
	</ul>
	<h3>Acknowledgments</h3>
	<p>The interaction style for this pattern is a synchronous
		interaction between the source application and the integration node flow, with
		the message kept on the queue for the TransformAndRoute flow until the
		synchronous acknowledgment is sent.</p>
	<p>
		By default, the HL7 Receiver flow generates an acknowledgment reply
		(ACK) or negative acknowledgment reply (NACK) message in response to
		successful receipts of data. If acknowledgments are not required,
		clear the check box for the <span class="msobjprop"> Send
			acknowledgment </span> parameter.
	</p>
	<p>After the acknowledgment is returned, the integration node flows ensure
		either that the message is processed, or that an error is raised, in
		which case the message data is saved to allow resubmission or
		alternative processing.</p>
	<p>Where values that are required for building an acknowledgment exist in
		the message, these values are used.</p>
	<p>The current state of the end-to-end interaction is stored at all
		major points in the flow, and the NACK messages include this error
		information.</p>
	<div class="tablenoborder">
		<h2>MSH</h2>
		<table summary="" width="100%" border="1" cellpadding="4"
			cellspacing="0" frame="border" rules="all">
			<thead align="left">
				<tr>
					<th class="firstcol" align="left" valign="top" width="33%">Field
						name</th>
					<th class="invisible" valign="top" width="33%">Field value in
						acknowledgment message</th>
					<th class="invisible" valign="top" width="34%">If not present
						in the input message</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSH.1.FieldSeparator</th>
					<td valign="top" width="*" class="invisible">MSH.1.FieldSeparator
						from the input message</td>
					<td valign="top" width="*" class="invisible"><span
						class="msobjpropval"> '|' </span></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSH.ServiceString</th>
					<td valign="top" width="*" class="invisible">MSH.2.ServiceString
						from the input message</td>
					<td valign="top" width="*" class="invisible"><span
						class="msobjpropval"> '^~\&amp;' </span></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSH.3.SendingApplication</th>
					<td valign="top" width="*" class="invisible"><span
						class="msobjpropval"> 'BROKER.RECEIVER' </span></td>
					<td valign="top" width="*" class="invisible"></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSH.4.SendingFacility</th>
					<td valign="top" width="*" class="invisible"><span
						class="msobjpropval"> ' ' </span></td>
					<td valign="top" width="*" class="invisible"></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSH.5.ReceivingApplication</th>
					<td valign="top" width="*" class="invisible">MSH.3.SendingApplication
						from the input message</td>
					<td valign="top" width="*" class="invisible"><span
						class="msobjpropval"> ' ' </span></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSH.6.ReceivingFacility</th>
					<td valign="top" width="*" class="invisible">MSH.4.SendingFacility
						from the input message</td>
					<td valign="top" width="*" class="invisible"><span
						class="msobjpropval"> ' ' </span></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSH.7.DateTimeOfMessage</th>
					<td valign="top" width="*" class="invisible">Current date time
						in the format <span class="msobjprop"> YYYYMMddHHmmss </span> .</td>
					<td valign="top" width="*" class="invisible"></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSH.9.MessageType</th>
					<td valign="top" width="*" class="invisible"><span
						class="msobjpropval"> 'ACK' </span></td>
					<td valign="top" width="*" class="invisible"></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSH.10.MessageControlID</th>
					<td valign="top" width="*" class="invisible">New unique
						identifier</td>
					<td valign="top" width="*" class="invisible"></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSH.11.ProcessingID</th>
					<td valign="top" width="*" class="invisible">MSH.11.ProcessingID
						from the input message</td>
					<td valign="top" width="*" class="invisible"><span
						class="msobjpropval"> 'P' </span></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSH.12.VersionID</th>
					<td valign="top" width="*" class="invisible">MSH.12.VersionID
						from the input message</td>
					<td valign="top" width="*" class="invisible"><span
						class="msobjpropval"> '2.2' </span></td>
				</tr>
			</tbody>
		</table>
		<h2>MSA</h2>
		<table summary="" width="100%" border="1" cellpadding="4"
			cellspacing="0" frame="border" rules="all">
			<thead align="left">
				<tr>
					<th class="firstcol" align="left" valign="top" width="33%">Field
						name</th>
					<th class="invisible" valign="top" width="33%">Field value in
						acknowledgment message</th>
					<th class="invisible" valign="top" width="34%">If not present
						in the input message</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSA.1.AcknowledgmentCode</th>
					<td valign="top" width="*" class="invisible">On successful
						receipt of the message, the MSA acknowledgment code is set to <span
						class="msobjpropval"> AA </span> and the MSA.3.TextMessage field
						is blank.</td>
					<td valign="top" width="*" class="invisible"></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSA.2.MessageControlID</th>
					<td valign="top" width="*" class="invisible">MSH.10.MessageControlID
						from the input message</td>
					<td valign="top" width="*" class="invisible"><span
						class="msobjpropval"> '123456789' </span></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSA.3.TextMessage</th>
					<td valign="top" width="*" class="invisible">On successful
						receipt of the message, the MSA acknowledgment code is set to <span
						class="msobjpropval"> AA </span> and the MSA.3.TextMessage field
						is blank.</td>
					<td valign="top" width="*" class="invisible"></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">MSA.4.ExpectedSequenceNumber</th>
					<td valign="top" width="*" class="invisible">MSH.13.ExpectedSequenceNumber
						from the input message</td>
					<td valign="top" width="*" class="invisible"></td>
				</tr>
			</tbody>
		</table>
		<h3>Errors</h3>
		<p>
			<b>Error removing MLLP byte</b>. The MSA acknowledgment code is set
			to <span class="msobjpropval">AR</span> and the MSA.3.TextMessage
			field is set to <span class="msobjpropval">MLLP Error -
				missing start byte</span>.
		</p>
		<p>
			<b>Error validating incoming MSH or de-duplicating data</b>. The MSA
			acknowledgment code is set to <span class="msobjpropval">AE</span>
			and the MSA.3.TextMessage field contains a DFDL parsing error
			message. The message summarizes the problem.
		</p>
		<p>
			<b>Error applying sequence logic</b>. The MSA acknowledgment code is
			set to <span class="msobjpropval">AR</span> and the MSA.3.TextMessage
			field is set to <span class="msobjpropval">An internal failure
				in the Sequence node</span>.
		</p>
		<p>
			<b>Error persisting the HL7 message to a queue</b>. The MSA
			acknowledgment code is set to <span class="msobjpropval">AR</span>
			and the MSA.3.TextMessage field is set to <span class="msobjpropval">Error
				while committing message into processor queue</span>.
		</p>
	</div>
	<div>
		<h2>Distribution</h2>
		<p>The source message is written to one or more queues for
			transforming and routing. The message is written to one queue for
			each part of the pattern, and each part of the pattern is then routed
			to the required number of destinations.</p>
	</div>
	<p></p>
	<div class="section">
		<a name="transform"></a>
		<h2 class="sectiontitle">Transformation and routing</h2>
		<p>The TransformAndRoute flow reads an HL7 message from the queue.
		</p>
		<h3>Remainder fields</h3>
		<p>
			If the <span class="msobjprop"> Report remainders </span> parameter
			is selected, a check is made for Remainder fields, which are
			additional fields that are found within a segment but are not modeled
			in the HL7 message that is used to parse incoming messages. If
			Remainder fields are found, these are either written to a queue or
			published. This option is used during development to identify the
			additional fields and determine how they are processed.
		</p>
		<h3>XML canonical form</h3>
		<p>The HL7 message is transformed into its XML canonical form and
			passed to the SubCustomize subflow. By default this subflow does
			nothing except pass on the message. However, the subflow provides a
			place where you can introduce customization for a particular pattern
			instance without changing the structure of the flow.</p>
		<p>
			If the <span class="msobjprop"> Canonical feed </span> parameter is
			selected, the canonical form is output at this time, see <a
				href="design.htm#publish">Output from a pattern instance</a>. You
			can use the canonical form of the input message as a feed to other
			applications that do not accept basic HL7 messages.
		</p>
		<h3>Distribution to destinations</h3>
		<p>
			The pattern provides for up to six destinations for each part of the
			pattern. You can configure each destination separately. If you select
			fewer than six destinations, only the selected destinations are
			configured. For each destination, the TransformAndRoute flow sends a
			copy of the message to the filtering subflow for the
			TransformAndRoute flow. For each destination, a filter is applied to
			determine whether an incoming message is sent to the destination. A
			filtering subflow for each destination, Dest
			<var>n</var>
			Filter, where
			<var>n</var>
			is the number of the destination, is configured by pattern parameters
			to generate a list of permitted pairs for message code and message
			event. Only messages that match are passed to the destination
			application.
		</p>
		<p>
			A dummy message is passed to the sender Dest
			<var>n</var>
			Sender subflow, where
			<var>n</var>
			is the number of the destination, whenever a message is filtered out,
			except when the <span class="msobjprop"> Sequencing action </span>
			parameter for a destination is set to <span class="msobjpropval">
				No sequencing </span> . This dummy message is required so that correct
			sequencing of messages from the source is maintained.
		</p>
		<h2>Segment filtering</h2>
		<p>
			After message filtering, each required message is transformed back
			into HL7 format. If the <span class="msobjprop"> Segment
				filtering </span> parameter is selected, any segments that are listed in
			the <span class="msobjprop"> Segment filters </span> table for the
			destination are removed as part of the transformation.
		</p>
		<h2>Customization</h2>
		<p>The message is then passed through a customization subflow. By
			default, this subflow does nothing except pass on the message.
			However, the subflow provides a place where you can introduce
			customization for a particular pattern instance. Finally, the message
			is written to the queue for the Sender flow.</p>
	</div>
	<div class="section">
		<a name="sending"></a>
		<h2 class="sectiontitle">Sender flows</h2>
		<p>
			A separate message flow, Dest
			<var>n</var>
			Sender subflow, where
			<var>n</var>
			is the number of the destination, is created for each destination.
		</p>
		<h3>Resequencing</h3>
		<p>
			Sequencing for a destination can be either strict or lax, which is
			determined by the <span class="msobjprop"> Sequencing action </span>
			pattern parameter. If <span class="msobjpropval"> Strict </span>
			sequencing is selected, a Resequence node is included in the Sender
			flow with an indefinite timeout. If messages arrive out of sequence,
			they are held on the sequencing queue until the missing messages
			arrive. If this option is chosen, the system queue that holds pending
			messages must be monitored and action taken to supply missing
			messages.
		</p>
		<p>
			For each message that is successfully delivered to a destination, the
			sequence numbers from source, and any resequencing in the Sender
			flow, are written to the queue
			<var>QueuePrefix</var>
			.SEQNOS, where
			<var>QueuePrefix</var>
			is defined by the <span class="msobjprop"> Queue prefix </span>
			parameter, together with a time stamp and the sequence group that
			corresponds to the destination specified as Dest
			<var>n</var>
			, where
			<var>n</var>
			is the number of the destination.
		</p>
		<p>
			Even with strict sequencing, some messages are not passed to a
			destination if the <span class="msobjprop"> Message filtering
			</span> option is selected. In this case the dummy messages, which represent
			those message that are not for delivery, are removed after
			resequencing and new sequence numbers are applied to the following
			messages before they are passed to the destination.
		</p>
		<p>
			If the <span class="msobjpropval"> Lax </span> sequencing option is
			selected, messages are generally delivered in sequence, but if a
			message is missing after the period of time specified by the <span
				class="msobjprop"> Sequencing timeout </span> parameter, a message
			is sent to the notification queue and the flow of messages continues.
			The missing message is inserted into the flow when it arrives. When a
			missing message arrives, it is also written to the .SEQNTFY queue.
		</p>
		<p>By default the system sequencing queues are defined as:</p>
		<ul>
			<li>SYSTEM.BROKER.EDA.EVENTS</li>
			<li>SYSTEM.BROKER.EDA.COLLECTIONS</li>
		</ul>
		<p>
			If the <span class="msobjprop"> Separate sequence queues </span>
			parameter is selected for a pattern, sequencing queues specific to
			the pattern instance are defined by using the <span class="msobjprop">
				Queue prefix </span> parameter as:
		</p>
		<ul>
			<li>SYSTEM.BROKER.EDA.<var>QueuePrefix</var>.EVENTS</li>
			<li>SYSTEM.BROKER.EDA.<var>QueuePrefix</var>.COLLECTIONS</li>
		</ul>
		<p>
			These nondefault sequencing queues are defined by a configurable
			service called <span class="msobjprop">
				patternInstance_setSeqQs </span> . The integration node instance creates a file
			called <span class="filepath"> <i>patternInstance</i>.resequence.configurableservice
			</span> with a definition of this service that must be created on the integration node
			on which the pattern instance will run. The Sender flows are also
			configured to use this configurable service.
		</p>
		<p>If no sequencing is required for a destination, the Resequence
			node and the report on missing messages are omitted from the flow.</p>
		<h3>Send and retry in the HL7DFDLOutput node</h3>
		<p>
			The HL7DFDLOutput node prepares a message for the destination
			application, changing it into a bit stream and adding the required
			Minimal Lower Layer Protocol (MLLP) delimiter byte, <span
				class="msobjpropval"> 0B </span> , to the beginning. The
			HL7DFDLOutput node then forwards this prepared message to the TCP/IP
			output node, which tries to send the message to the destination
			application.
		</p>
		<p>
			If the destination application returns an <span class="msobjpropval">
				AA </span> success code, the <span class="msobjprop">
				Environment.PatternVariables.FlowMilestoneReached </span> variable is
			cleared and the message is passed to the Out terminal.
		</p>
		<p>
			If the destination application returns an <span class="msobjpropval">
				AE </span> response code, the <span class="msobjprop">
				Environment.PatternVariables.FlowMilestoneReached </span> variable is set
			to <span class="msobjpropval"> ACKAE </span> and the message is
			passed to the Failure terminal. No retries are made after an <span
				class="msobjpropval"> ACKAE </span> response.
		</p>
		<p>
			If the message is successfully sent but no acknowledgment is
			received, or an invalid acknowledgment is received, it is treated in
			the same way as an <span class="msobjpropval"> AE </span> response,
			but the <span class="msobjprop">
				Environment.PatternVariables.FlowMilestoneReached </span> variable is set
			to <span class="msobjpropval">TIMEOUT</span>, <span
				class="msobjpropval">RECEIVEACK</span>, or <span
				class="msobjpropval">ACKERROR</span> before the message is passed to
			the Failure terminal. No retries are made.
		</p>
		<p>
			If the HL7DFDLOutput node fails to send the message to the
			destination, or if an <span class="msobjpropval"> AR </span>
			acknowledgment is returned from the destination, the message is
			passed to the Log Retry terminal. The message is retried when control
			is returned after logging until it is successful or until the number
			of retries reaches the limit set by the <span class="msobjprop">
				Retry limit </span> parameter.
		</p>
		<p>
			When the retry limit is reached, the <span class="msobjprop">
				Environment.PatternVariables.FlowMilestoneReached </span> variable is set
			to <span class="msobjpropval"> ACKARTOOMANYREPEATS </span> and the
			message is passed to the Failure terminal.
		</p>
		<h3>Message validation</h3>
		<p>
			Content validation is selected on a destination basis by using the <span
				class="msobjprop"> Validation </span> parameter in the <span
				class="msobjprop"> Destination communications </span> section. When
			validation is selected for a destination, the <span class="msobjprop">
				Validation </span> parameter is set to <span class="msobjpropval">
				Content </span> on the MQInput node for the relevant Sender flow. The
			<span class="msobjprop"> Parse timing </span> property on this node
			is defined by the pattern as <span class="msobjpropval">
				Immediate </span> so that validation occurs before any further processing.
			The validation gives only validation of the message against the HL7
			DFDL library. It does not provide full HL7 validation of dependent
			fields for example.
		</p>
	</div>
	<div class="section">
		<a name="messageset"></a>
		<h2 class="sectiontitle">HL7 DFDL model Library</h2>
		<p>The HL7 DFDL model library is used with the DFDL parser to
			parse and write HL7 messages. The resulting message tree can be
			serialized to an XML canonical form. The message definitions are
			flexible enough to tolerate local variations without requiring
			customization, and they can also be extended to allow the parsing of
			locally defined Z-segments and extra fields. Where local variations
			occur and the data in these local variations must be processed, the
			HL7 model must be modified so that it conforms with a matching
			specification to ensure all data can be accessed.</p>
		<p>The canonical form can be used by your organization to hold a
			representation of your data that runs on any operating system. This
			data can be in the form of standardized dates and times, formatting
			of numbers, or any other data standardization requirement that is
			imposed by your organization. The canonical form represents a
			separation of the source and destination applications, enabling
			maximum reuse and minimizing maintenance. A customization subflow for
			this canonical form is included in patterns that you generate.</p>
		<p>
			The HL7 DFDL library contains global element definitions for all
			segments that are defined in the HL7 v2.5.1, v2.6 or v2.7
			specification. The components and subcomponents in each segment are
			modeled with the correct delimiters. You can use a generic message
			definition with the name <span class="msobjprop"> HL7 </span> to
			parse any sequence of HL7 segments.
		</p>
	</div>
	<p></p>
	<div class="section">
		<a name="publish"></a>
		<h2 class="sectiontitle">Output from a pattern instance</h2>
		<p>
			In addition to the HL7 messages routed to specified destinations,
			the Healthcare: HL7 to HL7 DFDL pattern provides a number of other outputs. These outputs are
			either written to a queue or sent to a Publication node. The
			destination is determined by the pattern parameter <span
				class="msobjprop">Publish</span>. If the <span class="msobjpropval">Publish</span>
			option is selected, all information is published by using a topic
			hierarchy that begins with the pattern instance name.
		</p>
		<p>
			If the <span class="msobjpropval"> Write to Queue </span> option is
			selected, output is sent to queues with names that are generated from
			the pattern parameter <span class="msobjprop"> Queue prefix </span>
			and a fixed set of suffixes, as shown in the following table.
		</p>
		<p>
			<b>Note</b>: The initial facet of each topic and queue (the pattern
			instance name) is not shown.
		</p>
	</div>
	<div class="tablenoborder">
		<table summary="" width="100%" border="1" cellpadding="4"
			cellspacing="0" frame="border" rules="all">
			<thead align="left">
				<tr>
					<th class="firstcol" align="left" valign="top" width="20%">Output</th>
					<th class="invisible" valign="top" width="15%">Queue</th>
					<th class="invisible" valign="top" width="15%">Topic</th>
					<th valign="top" width="50%">Notes</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">Source
						Feed</th>
					<td valign="top" width="*" class="invisible">.SRC</td>
					<td valign="top" width="*" class="invisible">/Receiver/Source</td>
					<td valign="top" width="*" class="invisible">A copy of the
						source message, as received, is written.</td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">Journal</th>
					<td valign="top" width="*" class="invisible">.JRNL</td>
					<td valign="top" width="*" class="invisible">/Receiver/Journal</td>
					<td valign="top" width="*" class="invisible">This output
						provides a journal of incoming messages in standard pattern
						format.
						<p>See Note 1.</p></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">To
						TransformAndRoute flows</th>
					<td valign="top" width="*" class="invisible">.RXF<var>n</var>
					</td>
					<td valign="top" width="*" class="invisible">Not applicable</td>
					<td valign="top" width="*" class="invisible">For each
						destination, a message is sent to the TransformAndRoute flow.</td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">Messages
						in Error</th>
					<td valign="top" width="*" class="invisible">.ERR</td>
					<td valign="top" width="*" class="invisible">Not applicable</td>
					<td valign="top" width="*" class="invisible">Messages that
						cannot be correctly processed are written to the error queue with
						error information in an MQRFH2 header.</td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">Message
						IDs for duplicate checking</th>
					<td valign="top" width="*" class="invisible">.DUPID</td>
					<td valign="top" width="*" class="invisible">Not applicable</td>
					<td valign="top" width="*" class="invisible">Message
						identifiers, and associated ACK messages, are stored for
						comparison with later incoming messages to detect duplicate
						messages.
						<p>See Note 2.</p></td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">Remainders</th>
					<td valign="top" width="*" class="invisible">.REM</td>
					<td valign="top" width="*" class="invisible">/Remainders</td>
					<td valign="top" width="*" class="invisible">Messages with
						Remainder fields can be optionally written.</td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">Canonical</th>
					<td valign="top" width="*" class="invisible">.CAN</td>
					<td valign="top" width="*" class="invisible">/Canonical</td>
					<td valign="top" width="*" class="invisible">If the option to
						output a canonical feed is selected, a canonical XML form of the
						input message is written.</td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">To
						Sender flows</th>
					<td valign="top" width="*" class="invisible">.DEST<var>n</var>
					</td>
					<td valign="top" width="*" class="invisible">Not applicable</td>
					<td valign="top" width="*" class="invisible">For each
						destination, a message is sent to the Sender flow.</td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">Sequencing
						data</th>
					<td valign="top" width="*" class="invisible">SYSTEM.BROKER.EDA.EVENTS</td>
					<td valign="top" width="*" class="invisible">Not applicable</td>
					<td valign="top" width="*" class="invisible">The system queue
						that is used by default by the Resequence nodes in the Sender
						flows.</td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">Sequencing
						data</th>
					<td valign="top" width="*" class="invisible">SYSTEM.BROKER.EDA.COLLECTIONS</td>
					<td valign="top" width="*" class="invisible">Not applicable</td>
					<td valign="top" width="*" class="invisible">The system queue
						that is used by default by the Resequence nodes in the Sender
						flows.</td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">Sequencing
						data</th>
					<td valign="top" width="*" class="invisible">SYSTEM.BROKER.EDA.<var>QueuePrefix</var>.EVENTS</td>
					<td valign="top" width="*" class="invisible">Not applicable</td>
					<td valign="top" width="*" class="invisible">The queue that is
						used by the Resequence nodes in the Sender flows when the <span
						class="msobjpropval"> Separate sequence queues </span> option is
						selected.</td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">Sequencing
						data</th>
					<td valign="top" width="*" class="invisible">SYSTEM.BROKER.EDA.<var>QueuePrefix</var>.COLLECTIONS</td>
					<td valign="top" width="*" class="invisible">Not applicable</td>
					<td valign="top" width="*" class="invisible">The queue that is
						used by the Resequence nodes in the Sender flows when the <span
						class="msobjpropval"> Separate sequence queues </span> option is
						selected.</td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">Out
						of sequence messages</th>
					<td valign="top" width="*" class="invisible">.SEQNTFY</td>
					<td valign="top" width="*" class="invisible">Not applicable</td>
					<td valign="top" width="*" class="invisible">When the <span
						class="msobjpropval"> Lax </span> sequencing option is selected,
						messages that arrive out of sequence are written to this queue and
						delivered to the destination.</td>
				</tr>
				<tr>
					<th align="left" valign="top" width="*" class="firstcol">Sequence
						Numbers</th>
					<td valign="top" width="*" class="invisible">.SEQNOS</td>
					<td valign="top" width="*" class="invisible">Not applicable</td>
					<td valign="top" width="*" class="invisible">This queue
						records the latest sequence number delivered to each destination.
						When the <span class="msobjpropval"> Strict </span> sequencing
						option is selected, the queue is used to determine the last
						sequence number delivered to a destination.</td>
				</tr>
			</tbody>
		</table>
		<p>
			<b>Note 1:</b> A journal message is produced from a source message by
			adding MQMD and MQRFH2 headers. The MQRFH2 header includes:
		</p>
		<ul>
			<li>Integration node name</li>
			<li>Message flow</li>
			<li>Current time stamp</li>
		</ul>
		<p>
			<b>Note 2:</b> Each message, as it arrives, is checked by the queue
			for message IDs for a previous message with the same ID. These
			messages are given a timeout, which is determined by a message
			parameter, after which the messages are removed from the queue.
			Therefore, duplicates are checked for a given time period only, the
			default is 24 hours.
		</p>
	</div>
	<a href="overview.htm#anchorBack" title="Back">Back to the
		Healthcare: HL7 to HL7 DFDL pattern specification</a>
	<p></p>
</body>
</html>
