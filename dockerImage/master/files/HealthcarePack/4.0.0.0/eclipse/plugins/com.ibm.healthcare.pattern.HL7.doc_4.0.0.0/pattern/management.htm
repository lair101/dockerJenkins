<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" xml:lang="en-us">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="copyright" content="Copyright IBM Corporation 2011, 2014"/>
    <link rel="stylesheet" type="text/css" href="./css/pattern.css"/>
    <!-- 
    (C) COPYRIGHT International Business Machines Corp., 2011, 2014
    All Rights Reserved * Licensed Materials - Property of IBM
    --> 
    <title>Managing a Healthcare: HL7 to HL7 pattern instance</title>
</head>
<body role="main">
<a name="links"></a> <h1 class="topictitle1">Managing a Healthcare: HL7 to HL7 
pattern instance</h1>
<p class="shortdesc">
You can use pattern parameters to generate a pattern instance with values that 
are set for your own pattern instance. However, you must also deploy and manage 
the pattern instance, and you might also require changes for specific 
operational contexts.
</p>
<p>
The pattern assumes a simple topology, with all message flows running on a 
single integration node. Information about deploying and managing a pattern 
instance that uses this simple topology and how you can manage the pattern 
instance is included in this topic.
</p>
<p>
The pattern includes some specific customization points, which you can use to 
add your own changes.
</p>
<p>
This topic contains the following sections:
</p>
<div>
    <a href="management.htm#setup">Set up</a>
</div>
<div>
    <a href="management.htm#messageset">Preparing the HL7v25P message set</a>
</div>
<div>
    <a href="management.htm#customize">Customization</a>
</div>
<div>
    <a href="management.htm#deployment">Pattern deployment</a>
</div>
<div>
    <a href="management.htm#errors">Monitoring and Error handling</a>
</div>
<div class="section">
    <a name="setup"></a> <h2 class="sectiontitle">Set up</h2> <h4>Queues</h4>
    <p>
    You can choose to generate an MQSC script for defining the queues that are 
    required by the pattern by selecting the 
    <span class="msobjpropval">
    Generate scripts
    </span>
    check box in the 
    <span class="uicontrol">
    General
    </span>
    section of the
    <span class="uicontrol">
    Configure Pattern Parameters
    </span>
    tab, before you generate the pattern instance. This script, which is called <tt>queues.mqsc</tt>, 
    is in the root directory of the pattern instance project; it defines basic 
    queues and topics. 
    </p>
    <p>
    You can run the MQSC script by using the following command, where <var>MBQMGR</var> 
    is the name of the queue manager for your integration node:
    </p>
    <pre>runmqsc <var>MBQMGR</var> &lt; queues.mqsc</pre>
    <p>
    You can edit this MQSC script to add descriptions for your environment and to 
    set appropriate queue depths. 
    </p>
    <p>
    In particular, you must check the depth of the queue, flowprefix.DUPID, which 
    holds the duplicate data store. This queue stores all data that is used for 
    duplicate checking. If duplicate checking is enabled, the required depth of this 
    queue is calculated by multiplying the maximum receiver message rate by the 
    duration of the expiry setting. For example, if the maximum rate is 10 messages 
    per second and the expiry setting is 24 hours (86,400 seconds), the required 
    depth is 
    <span class="msobjpropval">
    864000
    </span>
    .
    </p>
    <p>
    It is expected that other queues are monitored and regularly cleared. These 
    queues are created with a default size, but you must review their use and ensure 
    that the depth is sufficient.
    </p>
    <p>
    You must run the MQSC script before you deploy the pattern instance.
    </p>
    <h4>Configurable service</h4>
    <p>
    If you have switched on sequencing and selected the option to separate sequence 
    queues, the pattern generates a configurable service file. This file is created 
    when you generate an instance of the pattern, in the root directory of the 
    container project that contains the generated message flows. This configurable 
    service provides information to the Resequence nodes about where to store 
    sequencing information. The configurable service must be deployed to the integration node 
    before the pattern is deployed.
    </p>
</div>
<div class="section">
    <a name="messageset"></a> <h2 class="sectiontitle">Preparing the HL7v25P message 
    set</h2>
    <p>
    Download the HL7v25P message set, see <a href = "resources.htm#resources">Resources 
    for the 
    <span>
    Healthcare: HL7 to HL7
    </span>
    pattern</a>.
    </p>
    <p>
    This message set meets the standards set out in the HL7 v2.5 standard. The 
    message used by the pattern is the HL7 message in the 
    <span class="msobjpropval">
    segments.mxsd
    </span>
    message definition file. If source or destination applications make 
    modifications to the standard, these modifications must be reflected in the 
    message model. The most likely modifications are:
    </p>
    <ul>
        <li>
            Modification to the mandatory setting of the fields that are defined in the 
            message model by changing the 
            <span class="msobjprop">
            Min occurs
            </span>
            or
            <span class="msobjprop">
            Max occurs
            </span>
            parameter values.
        </li>
        <li>
            Creation of any Z-segments that are used by source or destination applications. 
            Z-segments model application-specific data that is not defined in the HL7v25P 
            message set.
        </li>
        <li>
            Vendor-specific modifications or additions to the standard.
        </li>
    </ul>
    <b>Creating a new Z-segment</b>
    <p>
    Z-segments are used by applications to send or receive data that is defined 
    outside the HL7 specification. You can model Z-segments and use them in your 
    implementation:
    </p>
    <ol>
        <li>
            Create a new message definition file. This file keeps application specific code 
            separate from the main HL7v25P message set. Right-click the HL7v25P message set, 
            select
            <span class="uicontrol">
            New &gt; Message Definition File
            </span>
            .
        </li>
        <li>
            Set the 
            <span class="msobjprop">
            Target Namespace
            </span>
            property of this message definition file to
            <span class="msobjpropval">
            urn:hl7-org:v2xml
            </span>
        </li>
        <li>
            Open the new message definition file and select the 
            <span class="uicontrol">
            Properties
            </span>
            tab. Add the
            <span class="filepath">
            datatypes.mxsd
            </span>
            file.
        </li>
        <li>
            In your new 
            <span class="filepath">
            .mxsd
            </span>
            file, create a new global element with the same name as the Z-segment definition 
            provided by the source or destination application.
        </li>
        <li>
            Change the 
            <span class="msobjprop">
            Type
            </span>
            of this element to
            <span class="msobjpropval">
            New local complex
            </span>
            .
        </li>
        <li>
            Create individual fields as local elements. If the Z-segment has fields that 
            have child fields, select an appropriate 
            <span class="msobjprop">
            Type
            </span>
            for the element from the menu by clicking 
            <span class="uicontrol">
            More
            </span>
            . These types are defined in the 
            <span class="filepath">
            fields.mxsd
            </span>
            file. Ensure that the resulting structure matches the specification from the 
            source or destination provider. 
        </li>
        <li>
            Add the new element to the HL7 message:
            <ol>
                <li>
                    Open the 
                    <span class="filepath">
                    segments.mxsd
                    </span>
                    message definition file, select the
                    <span class="uicontrol">
                    Properties
                    </span>
                    tab, include the new message definition file that you created, and save the 
                    change.
                </li>
                <li>
                    For the new element that you created, add an element reference to the HL7 
                    message:
                    <ol>
                        <li>
                            In the 
                            <span class="filepath">
                            segments.mxsd
                            </span>
                            message definition file, expand the HL7 message.
                        </li>
                        <li>
                            Right-click 
                            <span class="uicontrol">
                            Choice
                            </span>
                            and select
                            <span class="uicontrol">
                            Add Element Reference
                            </span>
                            .
                        </li>
                    </ol>
                </li>
                <li>
                    Open the properties of the global element you created and set the tag to be the 
                    same as the element name.
                </li>
            </ol>
        </li>
        <li>
            For each element in the the new Z-segment, open the properties and set the 
            namespace to
            <span class="msobjpropval">
            urn:hl7-org:v2xml
            </span>
        </li>
    </ol>
    <b>Vendor specific additions to the HL7 standard</b>
    <p>
    HL7 implementations might make additions to the standard segments, as defined by 
    HL7, by adding additional fields to the end of a segment. These additions are 
    generically modeled by a Remainders field at the end of each segment definition. 
    However, you can add the additional fields that are required by vendors before 
    the Remainder field.
    </p>
</div>
<div class="section">
    <a name="customize"></a> <h2 class="sectiontitle">Customization</h2>
    <p>
    Three main customization points are available to users of the pattern, but 
    additional customization points are also available.
    </p>
    <h4>Source customization</h4>
    <p>
    The main TransformAndRoute message flow calls the SubCustomize subflow before 
    distributing the message to different destinations and before creating the 
    canonical form of the message, if required.
    </p>
    <p>
    The default SubCustomize subflow has no effect on the message, but you can use 
    this customization point to standardize data from the source to meet your 
    requirements. For example, you might have a standard for dates in the format
    <span class="msobjpropval">
    YYYY-MM-DD
    </span>
    , but the source uses a different date format. You can use this customization 
    point to modify any source data. Additionally, you might choose to include data 
    at this point that is available from other sources, such as databases.
    </p>
    <h4>Destination customization</h4>
    <p>
    For each destination there is a default customization subflow (named Dest<var>n</var>, 
    where <var>n</var> is the number of the destination) that has no effect on the 
    message, but you can use this subflow to build an output message that matches 
    the specifications required by that destination. For example, the destination 
    might require the following changes:
    </p>
    <ul>
        <li>
            Additional data that is required in Z-segments
        </li>
        <li>
            Modification of data from the source; for example, formatting the date of birth 
            of a patient based on destination date format requirements
        </li>
        <li>
            Deletion of data not required or supported by the destination
        </li>
    </ul>
    <h4>Use of Source or Canonical feeds</h4>
    <p>
    If you have chosen to generate a source feed or a canonical feed, each message 
    processed by the Receiver flow generates a copy of the source message or the 
    message after canonicalization. These messages are written to a WebSphere MQ 
    queue or published as determined by your pattern parameters.
    </p>
    <p>
    You might want to send messages to destinations that are not compatible with the 
    pattern, for example, to a data warehouse, a non-HL7 destination, or a 
    destination that uses a different transport mechanism. You can send messages to 
    destinations that are not compatible with the pattern by writing integration solutions 
    to process the messages from the source or canonical feeds.
    </p>
</div>
<div class="section">
    <a name="deployment"></a> <h2 class="sectiontitle">Pattern deployment </h2>
    <p>
    Create a new BAR file in the location where you want to store 
    these resources.
    </p>
    <p>
    The HL7v25P message set must be packaged in its own BAR file:
    </p>
    <ol>
        <li>
            Select the HL7v25P message set, and build the BAR file.
        </li>
        <li>
            Deploy the BAR file to all integration servers on which you want the pattern, or 
            parts of the pattern, to run.
        </li>
        <li>
            After the HL7v25P message set is deployed, ensure that all required queues are 
            defined and that any configurable service files are deployed.
        </li>
        <li>
            Create one or more BAR files that contain the flows that you want to deploy to a 
            specific integration server. In the simplest case, where everything runs in a 
            single runtime environment, include the Receiver flow, TransformAndRoute flow, 
            and all destination flows.
        </li>
        <li>
            To gain improved performance after the flows have built, you might want to 
            increase the
            <span class="msobjprop">
            Additional instances
            </span>
            setting for any flow that does not have sequencing requirements:
            <ol>
                <li>
                    Click the 
                    <span class="uicontrol">
                    Manage
                    </span>
                    tab.
                </li>
                <li>
                    Select the properties of flows that you want to configure, and set values that 
                    are required by your implementation.
                </li>
            </ol>
        </li>
    </ol>
    <p>
    </p>
</div>
<div class="section">
    <a name="errors"></a> <h2 class="sectiontitle">Monitoring and Error handling</h2>
    <p>
    Error notifications are written to an error queue for all message flows in the 
    pattern. A queue trace is also output to the location that you defined during 
    pattern generation. The MQRFH2 header of the error message contains information 
    indicating where the error occurred. Details about the behavior of each message 
    flow are specified in this section. 
    </p>
    <h3>Errors in the Receiver flow</h3>
    <p>
    The Receiver flow is run as a transaction and all output messages are committed 
    on successful completion of the message flow. If acknowledgments are required, 
    the last action of the Receiver flow is to send the acknowledgment (ACK). When 
    processing the acknowledgment is successfully completed, the flow ends and the 
    messages are committed.
    </p>
    <p>
    For each action in the Receiver flow:
    </p>
    <ul>
        <li>
            The 
            <span class="msobjprop">
            FlowMilestoneReached
            </span>
            parameter is set before the action is started; the parameter indicates the part 
            of the flow where the error occurred.
        </li>
        <li>
            The ErrorCondition message gives details of the error that occurred.
        </li>
    </ul>
    <p>
    If there is an error, the following events occur:
    </p>
    <ul>
        <li>
            The error is caught and processed by the ReceiverExceptionHandler subflow. This 
            subflow adds MQMD and MQRFH2 headers to the message and writes the message to 
            the error queue outside the transaction. The MQRFH2 header contains details 
            about where the error occurred.
            <p>
            If required, a negative acknowledgment reply (NACK) is generated and sent to the 
            source application.
            </p>
        </li>
        <li>
            An exception is thrown, which rolls back all messages and, if arrival based 
            sequencing is required, assigns a sequence number. The rollback also triggers 
            the output of the exception information to the Event log.
        </li>
        <li>
            The flow behaves as if no message has been received, and either a corrected 
            message is resubmitted or the information is processed at the destination 
            application.
        </li>
        <li>
            The NACK that is sent to the receiving application indicates that the message 
            has not been processed.
        </li>
    </ul>
    <p>
    The administrator must monitor the error queue and Event log to determine when 
    messages have not been processed by the receiver queue, and take the necessary 
    remedial action to resolve the error.
    </p>
    <h3>Errors in a TransformAndRoute flow</h3>
    <p>
    A TransformAndRoute flow is run as a single transaction. On successful 
    completion of the message flow, all output messages are committed to the 
    following locations:
    </p>
    <ul>
        <li>
            The input queue for the Sender flow for each destination
        </li>
        <li>
            The Remainder report (if selected)
        </li>
        <li>
            The Queue for the canonical message feed
        </li>
    </ul>
    <p>
    If there is an error, the following events occur:
    </p>
    <ul>
        <li>
            The error is caught and processed by the TransformationExceptionHandler subflow. 
            This subflow adds an MQRFH2 header to the message and writes the message to the 
            error queue outside the transaction. The MQRFH2 header contains details about 
            where the error occurred.
        </li>
        <li>
            An exception is thrown, which puts the input message back onto the queue, rolls 
            back any messages written to queues, and triggers the output of the exception 
            information to the Event log.
        </li>
    </ul>
    <p>
    </p>
    <p>
    The administrator must check the error queue and Event log to determine what 
    errors have occurred. Both the error queue and the backout queues contain 
    information, and after a corrected message is processed this information must be 
    cleared to prevent the queue from filling.
    </p>
    <p>
    The administrator must configure a backout queue for the input queue.
    </p>
    <p>
    When a message is rolled back by the Routing and Transformation flow, later 
    messages are still processed and passed to the Sender flows. However, this 
    action can have an effect on the Sender flows for any destination that 
    implements either lax or strict sequencing because the sequence number of the 
    message in error is missed, which causes messages to queue on the sequence queue 
    until either a message with the correct sequence number is received or, in the 
    case of lax sequencing only, the message times out allowing the missing sequence 
    number to be skipped. Therefore, errors in the TransformAndRoute flow must be 
    corrected as soon as possible.
    </p>
    <p>
    Two options are available for correcting an error in the TransformAndRoute 
    flow:
    </p>
    <ul>
        <li>
            A corrected message can be submitted to the TransformAndRoute flow. You can 
            edit the message written to the error queue or the backout queue and then 
            resubmit the message. This action ensures that the sequence numbers are correct.
        </li>
        <li>
            The information in the error message can be applied directly to the destination 
            applications. If strict sequencing is used for a destination, you must send a 
            dummy message to that destination to allow the flow of messages to continue:
            <ol>
                <li>
                    Create an XML message. For example:
                    <pre>&lt;sup:MaintainSequence xmlns:sup=http://ibm/healthcare/support&gt;
    &lt;MessageGeneratedToMaintainSequence&gt;true&lt;/ 
    MessageGeneratedToMaintainSequence&gt;
&lt;/sup:MaintainSequence&gt;</pre>
                </li>
                <li>
                    Put this XML message on the required destination queue. You must set the 
                    following two values for the MQRFH2 header user folder, where the sequence 
                    number element contains the message sequence to skip, and the sequence group 
                    element specifies the destination that the message references. For example:
                    <pre>&lt;SequenceNumber&gt;2&lt;/SequenceNumber&gt;
&lt;SequenceGroup&gt;DEST1&lt;/SequenceGroup&gt;</pre>
                </li>
            </ol>
        </li>
    </ul>
    <h3>Errors in a Sender flow</h3>
    <p>
    The Resequence node, named Maintain Sequence, is included in Sender flows that 
    support sequencing. A Resequence node divides the flow into two transactions. If 
    an exception occurs before the Resequence node, a message is written to the 
    error queue outside the transaction, and the input message is rolled back to the 
    input queue for the Sender flow. The input queue must be configured with a 
    backout queue.
    </p>
    <p>
    This type of error handling also applies if the Sender flow has no sequencing.
    </p>
    <p>
    Use one of the following solutions to correct the error:
    </p>
    <ul>
        <li>
            Correct and resubmit the message.
        </li>
        <li>
            Apply the event directly to the destination application and submit a dummy 
            message.
        </li>
    </ul>
    <p>
    Errors at this point in the flow mean that a sequence number is missed. If 
    sequencing is used for the Sender flow, the administrator must review the error 
    queue and correct the error as soon as possible. Later messages in the sequence 
    are saved on the internal sequence queues; an error can therefore result in a 
    build up of messages.
    </p>
    <p>
    If an error occurs after the Resequence node but before the message is sent to 
    the destination application, an error message is written and the message is 
    backed out onto the internal sequence queue. To resolve this type of error, the 
    administrator must ensure that the destination application is both available and 
    connected. The Resequence node continues trying to deliver the message so that 
    the message is delivered when the connection is made, and, in the case of strict 
    sequencing, later messages are not delivered until the earlier delivery succeeds.
    </p>
    <p>
    An error can also occur after a message is delivered. This type of error happens 
    if the destination application cannot process the message and sends a NACK. In 
    this case, the flow does not back out the message to the Resequence node because 
    the message might cause the same error repeatedly. Instead, a message is written 
    to the error queue. The administrator must check the error message and correct 
    the problem at the destination application. In this case, messages with a higher 
    sequence number continue to flow.
    </p>
    <p>
    The main information available for administrators who are resolving errors is 
    the information contained in the messages on the error queue and the backout 
    queues. However, the SEQNOS queue is also available, which stores the state of 
    the current sequence information. You can use this queue to give an overview of 
    the flow of the messages to each of the pattern destinations.
    </p>
</div>
<a href="overview.htm#anchorBack" title="Back">Back to the Healthcare: HL7 to 
HL7 pattern specification</a>
<p>
</p>
</body>
</html>
