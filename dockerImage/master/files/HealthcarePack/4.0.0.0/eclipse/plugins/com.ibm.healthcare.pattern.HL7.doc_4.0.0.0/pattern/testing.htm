<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" xml:lang="en-us">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="copyright" content="Copyright IBM Corporation 2011, 2014"/>
    <link rel="stylesheet" type="text/css" href="./css/pattern.css"/>
    <!-- 
    (C) COPYRIGHT International Business Machines Corp., 2011, 2014
    All Rights Reserved * Licensed Materials - Property of IBM
    --> 
    <title>Testing the Healthcare: HL7 to HL7 pattern</title>
</head>
<body role="main">
<a name="links"></a>
<div class="section">
    <h1 class="topictitle1">Testing the Healthcare: HL7 to HL7 pattern</h1>
    <p class="shortdesc">
    Use the following information to help you to test the
    <span>
    Healthcare: HL7 to HL7
    </span>
    pattern.
    </p>
    
        <p>
        This topic contains the following sections:
        </p>
        <ul><li>
            <a href="testing.htm#test">HL7 test application</a>
        </li>
        <li>
            <a href="testing.htm#messages">HL7 messages</a>
        </li>
        <li>
            <a href="testing.htm#setup">Basic pattern instance setup</a>
        </li>
        <li>
            <a href="testing.htm#flow">Flow of information through the pattern instance</a>
        </li>
        <li>
            <a href="testing.htm#options">Extra options</a>
       </li>
    </ul>
</div>
<div class="section">
    <a name="test"></a> <h2 class="sectiontitle">HL7 test application</h2>
    <p>
    The HL7 test application allows you to send and receive HL7 messages to the 
    integration node using MLLP. The application can simulate a single source and destination 
    clinical application. The test application provides options to simulate 
    different MLLP configurations and message sequencing. HL7 messages are provided 
    in the pattern resources to use as test data; see <a href = "resources.htm#resources">Resources 
    for the
    <span>
    Healthcare: HL7 to HL7
    </span>
    pattern</a>.
    </p>
    <p>
   	To start the HL7 test application, complete the following steps:
    <ol>
    	<li>Click <span class="uicontrol">File > New > Other</span>.</li>
    	<li>In the <span class="uicontrol">Healthcare</span> folder, select 
    		<span class="uicontrol">HL7 Test Application</span> and click <span class="uicontrol">Next</span>.</li>
    	<li>Enter a container and filename for the test application settings and click <span class="uicontrol">Finish</span>. 
    		The HL7 test application starts.</li>
    </ol>
    </p>
</div>
<div class="section">
    <a name="messages"></a> <h2 class="sectiontitle">HL7 messages</h2>
    <p>
    An HL7 message is split into segments and fields. The boundary between segments 
    can vary depending on the sending application. The sample messages that are used 
    in the test application use the hex characters
    <span class="msobjpropval">
    0D
    </span>
    and
    <span class="msobjpropval">
    0A
    </span>
    . Fields within a segment are separated by using the character declared in the 
    MSH segment at the start of every HL7 message, the default is the vertical bar 
    character (|). The segments are identified by the first field; the following 
    example has four segments: MSH, EVN, PID, and PV1. The MSH segment is the header 
    of the message, and has several fields that are explained in this topic.
    </p>
    <p>
    The following example shows a typical HL7 message (ADT A01) (line breaks have 
    been added to make it easier to read):
    </p>
    <pre>MSH|^~\&amp;|HL7ABLAB|HNA500|HNAM|HNAM|20090911132151||ADT^A01|
Q30235031T29347435X328970|A|2.3|123
EVN|A01|20090911132100|||^DRONE_PM1^DRONE_PM^^^^^^^Personnel
PID|1||1357920591||IntFace1101A^WinTask^^^^^Current||19801117|M||||||||||
10000476524^^^FIN^FIN NBR|100000451||||||0
PV1|1|Inpatient|CD:16067689^CD:16067691^CD:16067741^Uniontown Hospit^^Bed(s)
^Uniontown Hospit||||||||||||||501455^Orr^Maggi^^^^^^External ID^Personnel^^^
External
Identifier~25584^Orr^Maggi^^^^^^PERSONNEL PRIMARY
IDENTIFIER^Personnel^^^Personnel Primary Identifier|Inpatient|||||||||||||||||||
||
Uniontown Hospit||Active|||20090911132100
    </pre>
</div>
<div class="section">
    <a name="setup"></a> <h2 class="sectiontitle">Basic pattern instance setup</h2>
    <p>
    The main message flows of the pattern instance are:
    </p>
    <ul>
        <li>
            Receiver
        </li>
        <li>
            TransformAndRoute<var>n</var>
        </li>
        <li>
            Dest<var>n</var>Sender
        </li>
    </ul>
    <p>
    If you choose to create a pattern instance with more destinations, more Dest<var>n</var>Sender 
    flows are created, where <var>n</var> is the number of the destination.
    </p>
    <p>
    You must ensure that you have all the queues set up for the pattern instance, 
    see the &quot;Queues&quot; section in <a href="management.htm">Managing a 
    Healthcare: HL7 to HL7 pattern instance</a>.
    </p>
</div>
<div class="section">
    <a name="flow"></a> <h2 class="sectiontitle">Flow of information through the 
    pattern instance</h2>
    <p>
    When you send a message with the test application, the information flows through 
    a pattern instance in the following sequence:
    </p>
    <ol>
        <li>
            The message is put on the HL7_TEST_IN queue and picked up by the 
            SourceApplication flow.
        </li>
        <li>
            The SourceApplication flow adds MLLP bytes to the message and then sends it over 
            TCP/IP to the pattern instance.
        </li>
        <li>
            The message arrives in the Receiver message flow where the MLLP bytes are 
            trimmed.
        </li>
        <li>
            The MSH segment in the message is parsed.
        </li>
        <li>
            If the duplicate message and sequencing options are turned on in the pattern 
            instance setup, duplicate messages are checked and sequencing is set up.
        </li>
        <li>
            An acknowledgment reply (ACK) message is sent back to the SourceApplication flow.
        </li>
        <li>
            The message is sent to the RXF<var>n</var> queue, where <var>n</var> is the 
            number of the destination. The message is picked up from the RXF<var>n</var> 
            queue by the TransformAndRoute<var>n</var> message flow, where <var>n</var> is 
            the number of the destination.
            <p>
            If you set up message or segment filtering, the filtering is carried out in this 
            flow. Depending on the pattern instance setup, this flow might also contain 
            nodes that publish remainders in the message and the canonical form of the 
            message.
            </p>
        </li>
        <li>
            The message is transformed into XML and sent to each destination flow.
        </li>
        <li>
            In the destination flows the messages are sent to the DestinationApplication 
            flows, which respond with an ACK message.
        </li>
        <li>
            The ACK message is processed by the destination flow.
        </li>
        <li>
            Depending on the pattern instance configuration that you set up, the messages 
            might also be resequenced and sent to the destination again.
        </li>
    </ol>
    <p>
    All flows also have an exception handling subflow that handles any problems that 
    are caught by the flow.
    </p>
</div>
<div class="section">
    <a name="options"></a> <h2 class="sectiontitle">Extra options</h2> <h3>Sequencing</h3>
    <p>
    You can set up sequencing for the pattern instance in the
    <span class="msobjprop">
    Options
    </span>
    group of parameters. If the
    <span class="msobjpropval">
    Arrival based
    </span>
    option for sequencing is selected, the correct order for the messages is based 
    on the order in which they arrive in the pattern instance. If the
    <span class="msobjpropval">
    Content based
    </span>
    option for sequencing is selected, the value of the thirteenth field (<code>123</code> 
    in the example) in the MSH segment of the message is used as the sequence number. 
    The Receiver message flow sets up the sequencing for the pattern instance and 
    takes the sequence number of the messages.
    </p>
    <p>
    Messages are resequenced in each of the destination flows. For each destination 
    you can choose either strict or lax sequencing. If you choose strict sequencing 
    and a message is missing, the remaining messages are held until the missing 
    message arrives, which might block the flow indefinitely. If you choose lax 
    sequencing and a message is missing, you decide how long the flow waits before 
    it stops waiting for the missing message and continues processing messages.
    </p>
    <p>
    To exercise the sequencing options, you can manipulate the order in which 
    messages are sent to the pattern instance, change the sequencing number in the 
    message, or take messages off queues during processing.
    </p>
    <h3>Processing duplicates</h3>
    <p>
    If the
    <span class="msobjprop">
    Check duplicates
    </span>
    parameter is selected, the Receiver message flow contains extra nodes to check 
    for duplicates. The tenth field (<code>Q30235031T29347435X328970</code> in the 
    example) in the MSH segment of the message contains the message control ID, used 
    to check for duplicate messages. After a message is processed by the flow, the 
    message is saved on a queue that can be checked. The
    <span class="msobjprop">
    Check duplicates
    </span>
    subflow checks for duplicate messages; if the message is not a duplicate, 
    processing continues as normal. However, if the message is found to be a 
    duplicate and ACK messages are turned on, the original ACK message is returned 
    to the sending application. If ACK messages are turned off, the duplicate 
    message is processed in the same way as a new message arriving in the flow.
    </p>
    <p>
    To exercise duplicate processing, you can manipulate the tenth field of the MSH 
    segment in your messages.
    </p>
    <h3>Sending ACK and NACK messages</h3>
    <p>
    If the
    <span class="msobjprop">
    Send acknowledgment
    </span>
    parameter is selected, after the message has been processed by the Receiver 
    message flow the pattern instance sends an ACK message to the sending 
    application. This action informs the sending application that the message has 
    been successfully processed. The SourceApplication message flow has nodes that 
    are configured to handle ACK and negative acknowledgment reply (NACK) messages. 
    If a problem occurs with the message processing, a NACK message is sent to the 
    sending application instead.
    </p>
    <p>
    Nodes are also contained in the destination flows to handle ACK messages that 
    get sent back to the pattern instance from the destination application after the 
    destination application has successfully received the message.
    </p>
    <h3>Journaling</h3>
    <p>
    Several of the parameters in the
    <span class="msobjprop">
    Options
    </span>
    group of the pattern instance configuration allow you to choose what information 
    is logged about the messages as they are processed:
    </p>
    <ul>
        <li>
            <span class="msobjprop">
            Journaling
            </span>
            . This parameter can be turned on or off. Journaling writes a copy of the source 
            message to a message queue, or publishes the message to a topic. The message is 
            written with additional metadata that describes the source message flow, integration node 
            name, and pattern instance name. Use journaling to retain a copy of every input 
            message that is sent to aN integration node. Retaining messages is valuable from an audit 
            perspective. You can configure the journal queue so that messages expire after 
            one week, for example, so that the queue does not grow indefinitely.
        </li>
        <li>
            <span class="msobjprop">
            Publish
            </span>
            . If
            <span class="msobjprop">
            Journaling
            </span>
            is selected, you can change the
            <span class="msobjprop">
            Publish
            </span>
            parameter to determine whether the message is published to a topic or a queue.
        </li>
        <li>
            <span class="msobjprop">
            Canonical feed
            </span>
            and
            <span class="msobjprop">
            Source feed
            </span>
            . You can choose whether the message is logged.
        </li>
        <li>
            <span class="msobjprop">
            Report remainders
            </span>
            . You can choose whether remainders are logged. Remainders are fields that are 
            not modeled by the HL7v25P message set.
        </li>
    </ul>
    <h3>Message and segment filtering</h3>
    <p>
    <span class="msobjprop">
    Message filtering
    </span>
    allows you to filter messages based on their event type, the ninth field (<code>ADT^A01</code> 
    in the example) of the MSH segment of the message. Not all messages from a 
    source application are required by all destinations. You can use message 
    filtering to exclude specific messages from specific destinations. Message 
    filtering is configured on a per destination basis.
    </p>
    <p>
    When specifying message filters, the ninth field provides values for
    <span class="msobjprop">
    Code
    </span>
    and
    <span class="msobjprop">
    Event
    </span>
    . The two values are separated by the circumflex character (^). For the example 
    message at the start of this document,
    <span class="msobjprop">
    Code
    </span>
    is
    <span class="msobjpropval">
    ADT
    </span>
    , and
    <span class="msobjprop">
    Event
    </span>
    is
    <span class="msobjpropval">
    A01
    </span>
    . If sequencing is on and a message is filtered out, a dummy message is sent in 
    its place so that the sequence is maintained.
    </p>
    <p>
    <span class="msobjprop">
    Segment filtering
    </span>
    allows you to specify the segments that are removed from a message when it is 
    sent to a destination. You can use segment filtering to remove these segments 
    from a message before it is passed on to a destination. If the destination does 
    not support all the message segments that are sent by the source application, 
    you might want to use this option to filter out the segments, for example, 
    extensions to HL7 messages called Z-segments. Segment filtering is on a per 
    destination basis.
    </p>
    <p>
    Segments are specified by a three letter code (MSH, EVN, PID, and PV1 in the 
    example message). The MSH segment is the message header, which cannot be 
    filtered out even if it is specified by the user.
    </p>
</div>
<a href="overview.htm#anchorBack" title="Back">Back to the Healthcare: HL7 to 
HL7 pattern specification</a>
<p>
</p>
</body>
</html>
