<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja-jp" xml:lang="ja-jp">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="copyright" content="Copyright IBM Corporation 2011, 2014"/>
    <link rel="stylesheet" type="text/css" href="./css/pattern.css"/>
    <!-- 
    (C) COPYRIGHT International Business Machines Corp., 2011, 2014
    All Rights Reserved * Licensed Materials - Property of IBM
    --> 
    <title>「Healthcare: HL7 to HL7」パターンの設計</title>
</head>
<body role="main">
<a name="links"></a>
<div class="section">
    <h1 class="topictitle1">「Healthcare: HL7 to HL7」パターンの設計</h1>
    <p class="shortdesc">
「Healthcare: HL7 to HL7」パターンは GenericHL7Input ノードを使用して、着信 HL7 メッセージを完全に読み取ります。パターンによって使用される HL7v25P メッセージ・セットに存在していれば、メッセージに組み込めるセグメントに制限はありません。
パターンは、IBM Integration Bus Healthcare Pack に組み込まれている HL7v25P メッセージ・セットを使用します。
HL7v25P メッセージ・セットには、HL7 バージョン 2.5 で有効かつ標準であるすべてのセグメントの定義が含まれています。
この HL7v25P メッセージ・セットには、付加的な Z セグメントを追加できます。
Z セグメントは、HL7 仕様の外側で定義されているデータを送信または受信するために、アプリケーションによって使用されます。
</p>
    <p>
ソース・メッセージに対して、シーケンス番号付け、重複チェック、および HL7 肯定応答が受信側フローによって 1 回実行されます。
</p>
    <p>
パターンは、着信メッセージの配布先となる宛先の番号を定義します。
宛先ごとに、メッセージは処理され、フィルタリングが適用されます。
このフィルタリングにより、宛先でメッセージが必要かどうか、また出力メッセージにソース・メッセージのどのセグメントを組み込むかが決まります。
</p>
    <p>
各宛先の送信側フローは、メッセージが正しい順序で宛先アプリケーションに送信されるようにします。
</p>
</div>
<div>
    <p>
このトピックには、以下のセクションが含まれています。
</p>
    <ul><li>
        <a href="design.htm#source">GenericHL7Input ノードの使用によるソース・メッセージの処理</a></li>
    
    <li>
        <a href="design.htm#sequencing">受信側フローでの順序付け</a></li>
    <li>
        <a href="design.htm#transform">変換およびルーティング</a></li>
    <li>
        <a href="design.htm#sending">送信側フロー</a></li>
    <li>
        <a href="design.htm#messageset">HL7v25P メッセージ・セット</a></li>
    <li>
        <a href="design.htm#publish">パターン・インスタンスからの出力</a></li>
    </ul>
</div>
<div class="section">
    <a name="source"></a> <h2>GenericHL7Input ノードの使用によるソース・メッセージの処理</h2>
    <p>
入力メッセージは最初、受信側フローの GenericHL7Input ノードによって BLOB メッセージとして読み取られます。
構文解析の前に、先頭の MLLP バイトが削除されます。
先頭バイトが見つからない場合、送信側が MLLP プロトコルに従わないために、メッセージは拒否されます。
さらに、接続が閉じられ、否定応答 (NACK) 応答メッセージが送信されます。
</p>
    <p>
GenericHL7Input ノードは、HL7v25P メッセージ・セット内の HL7 メッセージ定義に従ってメッセージを構文解析します。
<a href="resources.htm"><span>「Healthcare: HL7 to HL7」</span>パターンのリソース</a>を参照してください。
すべてのセグメントが読み取られ、いずれかのセグメントに追加フィールドがある場合、そのフィールドはそのセグメントの「剰余」フィールドに配置されます。
</p>
    <h3>メッセージの検証</h3>
    <p>
受信側フローでは、メッセージ・データの標準検証は使用されません。
しかし、MSH セグメントの以下の特定の HL7 データ・フィールドの存在は確認されます。
それらのフィールドは、処理を続行するために必要だからです。
</p>
    <ul>
        <li>
MSH.1.FieldSeparator</li>
        <li>
            MSH.2.SeviceString
        </li>
        <li>
MSH.3.SendingApplication</li>
        <li>
            MSH4.SendingFacility
        </li>
        <li>
MSH.10.MessageControlID</li>
        <li>
MSH.11.ProcessingID</li>
        <li>
MSH.12.VersionID</li>
    </ul>
    <h3>重複処理オプション</h3>
    <p>
着信 HL7 メッセージにはそれぞれ、レコードを識別する MSH ヘッダー・セグメントの MessageControlID フィールドがあります。
</p>
    <p>
重複チェックを制御するパターン・パラメーターは、GenericHL7Input ノード上で同等のプロパティーを設定するために使用します。
</p>
    <p>
IBM Integration Bus Toolkit の<span class="uicontrol">「重複をチェック」</span>チェック・ボックスを選択する場合、送信側に返された肯定応答 (ACK) とともにすべてのID が重複キューに保管されます。
保存された ID に対して着信メッセージの ID がチェックされ、重複かどうかを判別します。
</p>
    <p>
重複が検出されると、処理は行われませんが、最初のメッセージとともに送信されたものと同じ肯定応答が送信側に返されます。
</p>
    <p>
ID は特定の時間、重複キューに保管されます。
その時間が過ぎると削除され、同じ ID を持つメッセージは重複として扱われなくなります。
メッセージ ID を保管するデフォルトの時間は 24 時間ですが、この時間はパターン・パラメーターを使って変更することができます。
重複キューは、設定時間内に予期されるメッセージ ID のピーク数を保管できるようなサイズにする必要があります。
</p>
    <p>
着信メッセージが重複でない場合、さらに処理を行うために、メッセージは GenericHL7Input ノードの Out ターミナルをパススルーします。
</p>
    <p>
重複が検出されると、GenericHL7Input ノードは ACK を要求側に返します。
重複レポート作成が選択された状態で重複が検出されるか、それ以外のエラーが GenericHL7Input ノードで発生する場合、メッセージは Failure ターミナルに渡され、エラーの記述が環境に入ります。
</p>
</div>
<p>
</p>
<a name="sequencing"></a> <h3>受信側フローでの順序付け</h3>
<p>
<span class="msobjprop">「シーケンス番号」</span>パラメーターは、メッセージが正しい順序で送信されるようにするために受信側フローがシーケンス番号を入力メッセージに割り当てる方法を決定します。
</p>
<p>
シーケンス番号の割り当てには 3 つのオプションを使用できます。
</p>
<ul>
    <li>
        <span class="msobjpropval">
        到着ベース
        </span>
        これはデフォルトです。
Integration ノードは、メッセージの到着時にシーケンス番号を割り当てます。
メッセージが到着してソース・アプリケーションによって送信された順番でそのメッセージにシーケンス番号が割り当てられるよう、受信側フローを単一スレッドのフローとしてデプロイする必要があります。
</li>
    <li>
        <span class="msobjpropval">
        内容ベース
        </span>
        . HL7 MSH セグメントに組み込まれているシーケンス番号を使用します。
ソース・アプリケーションがこのフィールドに確実に入力を行うことが分かっている場合、このオプションを選択することができます。
</li>
    <li>
        <span class="msobjpropval">
        順序付けなし
        </span>
        . どの宛先にもメッセージを順番に送信する必要がない場合、このオプションを選択して、Sequence ノードが受信側メッセージ・フローに含まれないようにします。
</li>
</ul>
<h3>肯定応答</h3>
<p>
このパターンの対話スタイルは、ソース・アプリケーションと Integration ノード・フローの間の同期対話です。
メッセージは、同期肯定応答が送信されるまで TransformAndRoute フローのキューに保持されます。
</p>
<p>
デフォルトで、HL7 受信側フローは、データの正常な受信の応答として、肯定応答 (ACK) メッセージまたは否定応答 (NACK) メッセージを生成します。
肯定応答が必要ない場合、<span class="msobjprop">「肯定応答の送信」</span>パラメーターのチェック・ボックスをクリアしてください。
</p>
<p>
肯定応答が返された後、メッセージ・フローは、メッセージが処理されるか、エラーになるようにします。
後者の場合、メッセージ・データは保存され、再送信または別の処理を行えるようにします。
</p>
<p>
肯定応答の作成に必要な値がメッセージに存在する場合、それらの値が使用されます。
</p>
<p>
エンドツーエンドの対話の現行の状態は、フロー内のすべての主要ポイントで保管され、NACK メッセージにこのエラー情報が入ります。
</p>
<div class="tablenoborder">
    <h2>MSH</h2>
    <table summary="" width="100%" border="1" cellpadding="4" cellspacing="0" frame="border" rules="all">
        <thead align="left">
        <tr>
            <th class="firstcol" align="left" valign="top" width="33%">フィールド名</th>
            <th class="invisible" valign="top" width="33%">肯定応答メッセージのフィールド値</th>
            <th class="invisible" valign="top" width="34%">入力メッセージが存在しない場合</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSH.1.FieldSeparator</th>
            <td valign="top" width="*" class="invisible">入力メッセージからの MSH.1.FieldSeparator</td>
            <td valign="top" width="*" class="invisible">
                <span class="msobjpropval">
                '|'
                </span>
            </td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSH.ServiceString</th>
            <td valign="top" width="*" class="invisible">入力メッセージからの MSH.2.ServiceString</td>
            <td valign="top" width="*" class="invisible">
                <span class="msobjpropval">
                '^~\&amp;'
                </span>
            </td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSH.3.SendingApplication</th>
            <td valign="top" width="*" class="invisible">
                <span class="msobjpropval">
                'BROKER.RECEIVER'
                </span>
            </td>
            <td valign="top" width="*" class="invisible"></td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSH.4.SendingFacility</th>
            <td valign="top" width="*" class="invisible">
                <span class="msobjpropval">
                ' '
                </span>
            </td>
            <td valign="top" width="*" class="invisible"></td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSH.5.ReceivingApplication</th>
            <td valign="top" width="*" class="invisible">入力メッセージからの MSH.3.SendingApplication</td>
            <td valign="top" width="*" class="invisible">
                <span class="msobjpropval">
                ' '
                </span>
            </td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSH.6.ReceivingFacility</th>
            <td valign="top" width="*" class="invisible">入力メッセージからの MSH.4.SendingFacility</td>
            <td valign="top" width="*" class="invisible">
                <span class="msobjpropval">
                ' '
                </span>
            </td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSH.7.DateTimeOfMessage</th>
            <td valign="top" width="*" class="invisible"><span class="msobjprop">YYYYMMddHHmmss</span> 形式の現在の日時。
</td>
            <td valign="top" width="*" class="invisible"></td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSH.9.MessageType</th>
            <td valign="top" width="*" class="invisible">
                <span class="msobjpropval">
                'ACK'
                </span>
            </td>
            <td valign="top" width="*" class="invisible"></td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSH.10.MessageControlID</th>
            <td valign="top" width="*" class="invisible">新規固有 ID</td>
            <td valign="top" width="*" class="invisible"></td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSH.11.ProcessingID</th>
            <td valign="top" width="*" class="invisible">入力メッセージからの MSH.11.ProcessingID</td>
            <td valign="top" width="*" class="invisible">
                <span class="msobjpropval">
                'P'
                </span>
            </td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSH.12.VersionID</th>
            <td valign="top" width="*" class="invisible">入力メッセージからの MSH.12.VersionID</td>
            <td valign="top" width="*" class="invisible">
                <span class="msobjpropval">
                '2.2'
                </span>
            </td>
        </tr>
        </tbody>
    </table>
    <h2>MSA</h2>
    <table summary="" width="100%" border="1" cellpadding="4" cellspacing="0" frame="border" rules="all">
        <thead align="left">
        <tr>
            <th class="firstcol" align="left" valign="top" width="33%">フィールド名</th>
            <th class="invisible" valign="top" width="33%">肯定応答メッセージのフィールド値</th>
            <th class="invisible" valign="top" width="34%">入力メッセージが存在しない場合</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSA.1.AcknowledgmentCode</th>
            <td valign="top" width="*" class="invisible">メッセージを正常に受信すると、MSA 肯定応答コードは <span class="msobjpropval">AA</span> に設定され、MSA.3.TextMessage フィールドはブランクになります。</td>
            <td valign="top" width="*" class="invisible"></td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSA.2.MessageControlID</th>
            <td valign="top" width="*" class="invisible">入力メッセージからの MSH.10.MessageControlID</td>
            <td valign="top" width="*" class="invisible">
                <span class="msobjpropval">
                '123456789'
                </span>
            </td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSA.3.TextMessage</th>
            <td valign="top" width="*" class="invisible">メッセージを正常に受信すると、MSA 肯定応答コードは <span class="msobjpropval">AA</span> に設定され、MSA.3.TextMessage フィールドはブランクになります。</td>
            <td valign="top" width="*" class="invisible"></td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">MSA.4.ExpectedSequenceNumber</th>
            <td valign="top" width="*" class="invisible">入力メッセージからの MSH.13.ExpectedSequenceNumber</td>
            <td valign="top" width="*" class="invisible"></td>
        </tr>
        </tbody>
    </table>
    <h3>エラー</h3>
    <p>
    <b>MLLP バイトを削除中にエラーが発生しました</b>。
MSA 肯定応答コードは <span class="msobjpropval">AR</span> に設定され、MSA.3.TextMessage フィールドは<span class="msobjpropval">「MLLP エラー - 先頭のバイトが欠落しています」</span>に設定されます。</p>
    <p>
    <b>着信 MSH の検証中またはデータの重複解消中にエラーが発生しました</b>。
MSA 肯定応答コードは <span class="msobjpropval">AE</span> に設定され、MSA.3.TextMessage フィールドは<span class="msobjpropval">「入力メッセージの構文解析または検証エラー」</span>に設定されます。
</p>
    <p>
    <b>シーケンス・ロジックの適用中にエラーが発生しました</b>。
MSA 肯定応答コードは <span class="msobjpropval">AR</span> に設定され、MSA.3.TextMessage フィールドは<span class="msobjpropval">「Sequence ノードでの内部障害」</span>に設定されます。
</p>
    <p>
    <b>HL7 メッセージをキューに維持する際にエラーが発生しました</b>。
MSA 肯定応答コードは <span class="msobjpropval">AR</span> に設定され、MSA.3.TextMessage フィールドは<span class="msobjpropval">「メッセージをプロセッサー・キューにコミットしていたときにエラーが発生しました」</span>に設定されます。
</p>
</div>
<div>
    <h2>配布</h2>
    <p>
変換およびルーティングのために、ソース・メッセージが 1 つ以上のキューに書き込まれます。
メッセージがパターンの部分ごとに 1 つのキューに書き込まれた後、パターンの各部分が必要な数の宛先にルーティングされます。
</p>
</div>
<p>
</p>
<div class="section">
    <a name="transform"></a> <h2 class="sectiontitle">変換およびルーティング</h2>
    <p>
TransformAndRoute フローはキューから HL7 メッセージを読み取ります。
</p>
    <h3>「剰余」フィールド</h3>
    <p>
<span class="msobjprop">「剰余の報告」</span>パラメーターを選択した場合は、「剰余」フィールドが検査されます。これはセグメント内に見つかる追加フィールドですが、着信メッセージの構文解析に使用される HL7 メッセージではモデル化されていません。「剰余」フィールドが見つかると、キューに書き込まれるか、パブリッシュされます。
このオプションは、開発の際に追加フィールドを識別し、その処理方法を決定するために使用されます。
</p>
    <h3>XML 正規形式</h3>
    <p>
HL7 メッセージはその XML 正規形式に変換され、SubCustomize サブフローに渡されます。
デフォルトで、このサブフローは、メッセージを渡すこと以外は何も行いません。
しかし、このサブフローは、フローの構造を変更することなく特定のパターン・インスタンスのカスタマイズを導入する場所を提供します。
</p>
    <p>
<span class="msobjprop">「正規のフィード」</span>パラメーターを選択した場合は、その時点で正規形式が出力されます。<a href="design.htm#publish">『パターン・インスタンスからの出力』</a>を参照してください。入力メッセージの正規形式を、基本 HL7 メッセージを受け入れない他のアプリケーションへのフィードとして使用することができます。
</p>
    <h3>宛先への配布</h3>
    <p>
パターンは、パターンの各部分に対して最大 6 つの宛先を提供します。
各宛先は個別に構成することができます。
選択する宛先が 6 つより少ない場合、選択した宛先だけが構成されます。
 TransformAndRoute フローは宛先ごとに、TransformAndRoute フローのフィルタリング・サブフローにメッセージのコピーを送信します。
着信メッセージが宛先に送信されるかどうかを判別するために、宛先ごとにフィルターが適用されます。
宛先ごとのフィルタリング・サブフロー Dest<var>n</var>Filter (<var>n</var> は宛先の番号) は、パターン・パラメーターによって構成され、メッセージ・コードおよびメッセージ・イベントの許可されるペアのリストを生成します。
一致するメッセージだけが宛先アプリケーションに渡されます。
</p>
    <p>
宛先の<span class="msobjprop">「順序付けアクション」</span>パラメーターが<span class="msobjpropval">「順序付けなし」</span>に設定されている場合を除き、メッセージがフィルターで除外される際は、常にダミー・メッセージが送信側の Dest<var>n</var>Sender サブフロー (<var>n</var> は宛先の番号) に渡されます。このダミー・メッセージは、ソースからのメッセージの正しい順序付けを維持するために必要です。
</p>
    <h2>セグメント・フィルタリング</h2>
    <p>
メッセージをフィルタリングした後、必要なメッセージはそれぞれ HL7 形式に再び変換されます。
<span class="msobjprop">「セグメント・フィルタリング」</span>パラメーターを選択すると、宛先の<span class="msobjprop">「セグメント・フィルター」</span>テーブルにリストされているセグメントがあれば、それらはすべて変換の過程で削除されます。
</p>
    <h2>カスタマイズ</h2>
    <p>
次に、メッセージはカスタマイズ・サブフローをパススルーします。
デフォルトで、このサブフローは、メッセージを渡すこと以外は何も行いません。
しかし、このサブフローは、特定のパターン・インスタンスのカスタマイズを導入する場所を提供します。
最後に、メッセージは送信側フローのキューに書き込まれます。
</p>
</div>
<div class="section">
    <a name="sending"></a> <h2 class="sectiontitle">送信側フロー</h2>
    <p>
メッセージ・フロー Dest<var>n</var>Sender サブフロー (<var>n</var> は宛先の番号) は、宛先ごとに個別に作成されます。
</p>
    <h3>再順序付け</h3>
    <p>
宛先の順序付けは、「厳密」か「緩い」のいずれかで行えます。
これは、<span class="msobjprop">「順序付けアクション」</span>パターン・パラメーターによって決まります。
順序付けに<span class="msobjpropval">「厳密」</span>を選択すると、無期限のタイムアウトで Resequence ノードが送信側フローに組み込まれます。
順番どおりにメッセージが到着しない場合、欠落したメッセージが到着するまで、順序付けキューに保持されます。
このオプションを選択する場合、保留メッセージを保持しているシステム・キューをモニターし、欠落メッセージを提供するためのアクションを取る必要があります。
</p>
    <p>
宛先に正常に送信されるメッセージごとに、ソースからのシーケンス番号、および送信側フローでの再順序付け (存在する場合) が、Dest<var>n</var> で指定される宛先 (<var>n</var> は宛先の番号) に対応するタイム・スタンプおよびシーケンス・グループとともに、キュー <var>QueuePrefix</var>.SEQNOS に書き込まれます (<var>QueuePrefix</var> は<span class="msobjprop">「キュー接頭部」</span>パラメーターによって定義される)。
</p>
    <p>
厳密な順序付けを使用する場合でも、<span class="msobjprop">「メッセージ・フィルタリング」</span>オプションを選択すると、いくつかのメッセージは宛先に渡されません。この場合、ダミー・メッセージ (送信用ではないメッセージを表す) は再順序付けの後で削除され、宛先に渡される前に後続のメッセージに新しいシーケンス番号が適用されます。
</p>
    <p>
<span class="msobjpropval">「緩い」</span>順序付けオプションを選択する場合、メッセージは通常、順番に送信されますが、<span class="msobjprop">「順序付けタイムアウト」</span>パラメーターによって指定された期間の後にメッセージが欠落する場合、メッセージは通知キューに送信され、メッセージのフローは続行します。
欠落メッセージは、その到着時にフローに挿入されます。
欠落メッセージが到着すると、.SEQNTFY キューへの書き込みも行われます。
</p>
    <p>
デフォルトで、システムの順序付けキューは次のように定義されます。
</p>
    <ul>
        <li>
SYSTEM.BROKER.EDA.EVENTS</li>
        <li>
SYSTEM.BROKER.EDA.COLLECTIONS</li>
    </ul>
    <p>
パターンに対して<span class="msobjprop">「個別のシーケンス・キュー」</span>パラメーターを選択する場合、パターン・インスタンスに固有の順序付けキューが<span class="msobjprop">「キュー接頭部」</span>パラメーターを使って次のように定義されます。
</p>
    <ul>
        <li>
            SYSTEM.BROKER.EDA.<var>QueuePrefix</var>.EVENTS
        </li>
        <li>
            SYSTEM.BROKER.EDA.<var>QueuePrefix</var>.COLLECTIONS
        </li>
    </ul>
    <p>
これらの非デフォルトの順序付けキューは、<span class="msobjprop">patternInstance_setSeqQs</span> と呼ばれる構成可能サービスによって定義されます。
パターン・インスタンスは、<span class="filepath"><i>patternInstance</i>.resequence.configurableservice</span> というファイルを、このサービスの定義とともに作成します。
このサービスの定義は、パターン・インスタンスを実行する Integration ノード上に作成する必要があります。
送信側フローも、この構成可能サービスを使用するように構成されます。
</p>
    <p>
宛先で順序付けが不要な場合、Resequence ノードおよび欠落メッセージに関するレポートはフローから省略されます。
</p>
    <h3>GenericHL7Output ノードでの送信および再試行</h3>
    <p>
GenericHL7Output ノードは宛先アプリケーションのメッセージを準備し、それをビット・ストリームに変更し、必要な Minimal Lower Layer Protocol (MLLP) 区切り文字バイト <span class="msobjpropval">0B</span> を先頭に追加します。
その後、GenericHL7Output ノードはこの準備されたメッセージを TCP/IP 出力ノードに転送し、この TCP/IP 出力ノードはそのメッセージを宛先アプリケーションに送信します。
</p>
    <p>
宛先アプリケーションが <span class="msobjpropval">AA</span> 成功コードを返す場合、<span class="msobjprop">Environment.PatternVariables.FlowMilestoneReached</span> 変数はクリアされ、メッセージが Out ターミナルに渡されます。
</p>
    <p>
宛先アプリケーションが <span class="msobjpropval">AE</span> 応答コードを返す場合、<span class="msobjprop">Environment.PatternVariables.FlowMilestoneReached</span> 変数は <span class="msobjpropval">ACKAE</span> に設定され、メッセージが Failure ターミナルに渡されます。
<span class="msobjpropval">ACKAE</span> 応答の後、再試行は行われません。
</p>
    <p>
メッセージは正常に送信されるものの肯定応答を受信しない場合、または無効な肯定応答を受信する場合、<span class="msobjpropval">AE</span> 応答と同じように扱われます。
しかし、<span class="msobjprop">Environment.PatternVariables.FlowMilestoneReached</span> 変数は、メッセージが Failure ターミナルに渡される前に、<span class="msobjpropval">TIMEOUT</span>、<span class="msobjpropval">RECEIVEACK</span>、または <span class="msobjpropval">ACKERROR</span> に設定されます。
再試行は行われません。</p>
    <p>
GenericHL7Output ノードが宛先にメッセージを送信できない場合、または <span class="msobjpropval">AR</span> 肯定応答が宛先から返される場合、メッセージは Log Retry ターミナルに渡されます。
ロギングの後に制御が返されると、成功するまで、または<span class="msobjprop">「再試行限界」</span>パラメーターによって設定された限界に再試行回数が達するまで、メッセージが再試行されます。
</p>
    <p>
再試行限界に達すると、<span class="msobjprop">Environment.PatternVariables.FlowMilestoneReached</span> 変数が <span class="msobjpropval">ACKARTOOMANYREPEATS</span> に設定され、メッセージが Failure ターミナルに渡されます。
</p>
    <h3>メッセージの検証</h3>
    <p>
<span class="msobjprop">「宛先通信」</span>セクションの<span class="msobjprop">「検証」</span>パラメーターを使って、コンテンツの検証が宛先ごとに選択されます。
宛先に対して検証を選択すると、
    <span class="msobjprop">
    「検証」
    </span>
    パラメーターが、関連した送信側フローの MQInput ノード上で
    <span class="msobjpropval">
    「内容」
    </span>
    に設定されます。検証が追加処理の前に行われるようにするために、このノードの<span class="msobjprop">「構文解析のタイミング」</span>プロパティーは、パターンによって<span class="msobjpropval">「即時」</span>として定義されます。
検証では、HL7v25P メッセージ・セットに対するメッセージの検証だけが行われます。
例えば、従属フィールドに対する完全な HL7 検証は行われません。
</p>
</div>
<div class="section">
    <a name="messageset"></a> <h2 class="sectiontitle">HL7v25P メッセージ・セット</h2>
    <p>
HL7v25P メッセージ・セットを MRM パーサーとともに使用して、HL7 メッセージを解析および記述します。
結果として生成されるメッセージ・ツリーを XML 正規形式にシリアライズすることができます。
メッセージ定義は柔軟なので、カスタマイズの必要なしにローカルのバリエーションに対応できますが、拡張することによってローカル定義の Z セグメントおよび余分のフィールドを解析可能にすることもできます。
ローカルのバリエーションが発生し、それらのローカルのバリエーションのデータを処理する必要がある場合、すべてのデータへのアクセスを可能とするために、一致する仕様に準拠するよう HL7 モデルを変更する必要があります。
</p>
    <p>
所属する組織で正規形式を使用して、あらゆるオペレーティング・システムで実行されるデータの表現を保持することができます。
このデータは、標準化された日付と時刻、書式設定された数値、または組織によって要求されている他のデータ標準化要求に合わせた形式にすることができます。
正規形式は、ソース・アプリケーションと宛先アプリケーションを分離し、最大限再利用して、保守を最小限に抑えられるようにすることを表します。
この正規形式のカスタマイズ・サブフローは、生成するパターンに組み込まれます。
</p>
    <p>
HL7v25P メッセージ・セットには、HL7 v2.5 仕様で定義されているすべてのセグメントのグローバル・エレメント定義が含まれます。
各セグメント内のコンポーネントおよびサブコンポーネントが、正しい区切り文字でモデル化されます。
<span class="msobjprop">HL7</span> という名前の汎用メッセージ定義を使用して、HL7 セグメントのあらゆるシーケンスを構文解析することができます。
</p>
    <p>
    <b>注:</b> IBM Integration Bus に付属する Healthcare サンプルにも HL7 メッセージ・セットがあります。
競合を回避するために、IBM Integration Bus Healthcare Pack で使用されるメッセージ・セットには別の名前が付けられています (HL7v25P)。
HL7v25P メッセージ・セットはより最新であり、このメッセージ・セットは、<span>「Healthcare: HL7 to HL7」</span>パターンとともに使用する必要があります。
</p>
</div>
<p>
</p>
<div class="section">
    <a name="publish"></a> <h2 class="sectiontitle">パターン・インスタンスからの出力</h2>
    <p>
指定された宛先にルーティングされる HL7 メッセージに加えて、このパターンは他にもいくつかの出力を提供します。
これらの出力は、キューに書き込まれるか、または Publication ノードに送信されます。
宛先は、パターン・パラメーター <span class="msobjprop">「パブリッシュ」</span>によって決まります。<span class="msobjpropval">「パブリッシュ」</span>オプションが選択されている場合は、パターン・インスタンス名で始まるトピック階層を使用することにより、すべての情報がパブリッシュされます。
    </p>
    <p>
<span class="msobjpropval">「キューへの書き込み」</span>オプションが選択されている場合は、パターン・パラメーター<span class="msobjprop">「キュー接頭部」</span>と固定の接尾部セット (次の表に記載します) から生成される名前のキューに出力が送信されます。
</p>
    <p>
    <b>注</b>: 各トピックおよびキュー (パターン・インスタンス名) の初期ファセットは示されていません。
</p>
</div>
<div class="tablenoborder">
    <table summary="" width="100%" border="1" cellpadding="4" cellspacing="0" frame="border" rules="all">
        <thead align="left">
        <tr>
            <th class="firstcol" align="left" valign="top" width="20%">出力</th>
            <th class="invisible" valign="top" width="15%">キュー
</th>
            <th class="invisible" valign="top" width="15%">トピック</th>
            <th valign="top" width="50%">注</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">ソース・フィード</th>
            <td valign="top" width="*" class="invisible">.SRC</td>
            <td valign="top" width="*" class="invisible">/受信側/ソース</td>
            <td valign="top" width="*" class="invisible">受信されたとおりのソース・メッセージのコピーが書き込まれます。
</td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">ジャーナル</th>
            <td valign="top" width="*" class="invisible">.JRNL</td>
            <td valign="top" width="*" class="invisible">/受信側/ジャーナル</td>
            <td valign="top" width="*" class="invisible">この出力は、着信メッセージのジャーナルを標準パターン形式で提供します。
<p>
注 1 を参照。</p>
            </td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">TransformAndRoute フローへ</th>
            <td valign="top" width="*" class="invisible">.RXF<var>n</var></td>
            <td valign="top" width="*" class="invisible">適用外</td>
            <td valign="top" width="*" class="invisible">宛先ごとに、メッセージが TransformAndRoute フローに送信されます。
</td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">エラーのあるメッセージ</th>
            <td valign="top" width="*" class="invisible">.ERR</td>
            <td valign="top" width="*" class="invisible">適用外</td>
            <td valign="top" width="*" class="invisible">正しく処理できなかったメッセージが、MQRFH2 ヘッダーにエラー情報を入れてエラー・キューに書き込まれます。
</td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">重複チェック用のメッセージ ID
</th>
            <td valign="top" width="*" class="invisible">.DUPID</td>
            <td valign="top" width="*" class="invisible">適用外</td>
            <td valign="top" width="*" class="invisible">メッセージ ID とそれに関連付けられた ACK メッセージが、後から届く着信メッセージと比較してメッセージの重複を検出するために格納されます。
<p>
注 2 を参照。
</p>
            </td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">剰余</th>
            <td valign="top" width="*" class="invisible">.REM</td>
            <td valign="top" width="*" class="invisible">/剰余</td>
            <td valign="top" width="*" class="invisible">「剰余」フィールドを持つメッセージをオプションで書き込むことができます。
</td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">正規</th>
            <td valign="top" width="*" class="invisible">.CAN</td>
            <td valign="top" width="*" class="invisible">/正規</td>
            <td valign="top" width="*" class="invisible">正規フィードを出力するオプションを選択する場合、入力メッセージの Canonical XML 形式が書き込まれます。
</td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">送信側フローへ</th>
            <td valign="top" width="*" class="invisible">.DEST<var>n</var></td>
            <td valign="top" width="*" class="invisible">適用外</td>
            <td valign="top" width="*" class="invisible">宛先ごとに、メッセージが送信側フローに送信されます。</td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">順序付けデータ </th>
            <td valign="top" width="*" class="invisible">SYSTEM.BROKER.EDA.EVENTS</td>
            <td valign="top" width="*" class="invisible">適用外</td>
            <td valign="top" width="*" class="invisible">デフォルトで送信側フローの Resequence ノードで使用されるシステム・キュー。</td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">順序付けデータ </th>
            <td valign="top" width="*" class="invisible">SYSTEM.BROKER.EDA.COLLECTIONS</td>
            <td valign="top" width="*" class="invisible">適用外</td>
            <td valign="top" width="*" class="invisible">デフォルトで送信側フローの Resequence ノードで使用されるシステム・キュー。</td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">順序付けデータ </th>
            <td valign="top" width="*" class="invisible">SYSTEM.BROKER.EDA.<var>QueuePrefix</var>.EVENTS</td>
            <td valign="top" width="*" class="invisible">適用外</td>
            <td valign="top" width="*" class="invisible"><span class="msobjpropval">「個別のシーケンス・キュー」</span>オプションを選択したときに送信側フローの Resequence ノードで使用されるキュー。</td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">順序付けデータ </th>
            <td valign="top" width="*" class="invisible">SYSTEM.BROKER.EDA.<var>QueuePrefix</var>.COLLECTIONS</td>
            <td valign="top" width="*" class="invisible">適用外</td>
            <td valign="top" width="*" class="invisible"><span class="msobjpropval">「個別のシーケンス・キュー」</span>オプションを選択したときに送信側フローの Resequence ノードで使用されるキュー。</td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">順不同メッセージ</th>
            <td valign="top" width="*" class="invisible">.SEQNTFY</td>
            <td valign="top" width="*" class="invisible">適用外</td>
            <td valign="top" width="*" class="invisible"><span class="msobjpropval">「緩い」</span>順序付けオプションを選択すると、順不同で到着するメッセージはこのキューに書き込まれ、宛先に送信されます。
</td>
        </tr>
        <tr>
            <th align="left" valign="top" width="*" class="firstcol">シーケンス番号</th>
            <td valign="top" width="*" class="invisible">.SEQNOS</td>
            <td valign="top" width="*" class="invisible">適用外</td>
            <td valign="top" width="*" class="invisible">このキューは、各宛先に送信される最新のシーケンス番号を記録します。
<span class="msobjpropval">「厳密」</span>順序付けオプションを選択すると、最後に宛先に送信されたシーケンス番号を判別するためにキューが使用されます。
</td>
        </tr>
        </tbody>
    </table>
    <p>
    <b>注 1:</b> ジャーナル・メッセージは、ソース・メッセージに MQMD ヘッダーおよび MQRFH2 ヘッダーを追加することによって生成されます。
MQRFH2 ヘッダーには、以下のものが含まれています。
</p>
    <ul>
        <li>
Integration ノード名
</li>
        <li>
メッセージ・フロー</li>
        <li>
現在のタイム・スタンプ</li>
    </ul>
    <p>
    <b>注 2:</b> 各メッセージは、到着した時点で、メッセージ ID が以前のメッセージと同じ ID かどうか、キューによって検査されます。
これらのメッセージにはタイムアウト (メッセージ・パラメーターによって決まる) が設定され、その時間を過ぎるとメッセージはキューから削除されます。
したがって、重複は特定の期間 (デフォルトは 24 時間) についてのみ検査されます。
</p>
</div>
<a href="overview.htm#anchorBack" title="戻る">「Healthcare: HL7 to HL7」パターンの仕様に戻る</a>
<p>
</p>
</body>
</html>
