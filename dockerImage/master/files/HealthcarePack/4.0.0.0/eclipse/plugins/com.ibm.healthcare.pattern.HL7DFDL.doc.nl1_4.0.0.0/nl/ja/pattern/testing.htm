<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja-jp" xml:lang="ja-jp">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="copyright" content="Copyright IBM Corporation 2013, 2014"/>
    <link rel="stylesheet" type="text/css" href="./css/pattern.css"/>
    <!-- 
    (C) COPYRIGHT International Business Machines Corp., 2013, 2014
    All Rights Reserved * Licensed Materials - Property of IBM
    --> 
    <title>「Healthcare: HL7 to HL7 DFDL」パターンのテスト</title>
</head>
<body role="main">
<a name="links"></a>
<div class="section">
    <h1 class="topictitle1">「Healthcare: HL7 to HL7 DFDL」パターンのテスト</h1>
    <p class="shortdesc">
以下の情報は、<span>「Healthcare: HL7 to HL7 DFDL」</span>パターンをテストする際に役立ちます。
</p>
    <div>
        <p>
このトピックには、以下のセクションが含まれています。
    </p>
        <div>
            <a href="testing.htm#test">テスト・アプリケーション</a>
      </div>
        <div>
            <a href="testing.htm#messages">HL7 メッセージ</a>
</div>
        <div>
            <a href="testing.htm#setup">基本的なパターン・インスタンスのセットアップ</a>
</div>
        <div>
            <a href="testing.htm#flow">パターン・インスタンスでの情報のフロー</a>
</div>
        <div>
            <a href="testing.htm#options">その他のオプション</a>
</div>
    </div>
</div>
<div class="section">
    <a name="test"></a> <h2 class="sectiontitle">テスト・フロー</h2>
    <p>
このパターンを使用すると、HL7 アプリケーションを相互接続し、フィルター処理したメッセージを 1 つの送信側アプリケーションから多数の宛先アプリケーションに送付できます。
パターン・インスタンスの利用方法を理解する手始めとして、メッセージ・フローを使用してソースおよび宛先の臨床アプリケーションをシミュレートしてください。
</p>
    <p>
このパターンに組み込まれている <span class="msobjpropval">TestApplication</span> プロジェクトについては、<a href = "resources.htm#resources"><span>「Healthcare: HL7 to HL7 DFDL」</span>パターンのリソース</a>を参照してください。
これには、SourceApplication という 1 つのソース・フローと、DestinationApplication という 6 個の宛先フローが含まれています。
6 個の宛先アプリケーション・フローは、接続の詳細以外はすべて同じです。
宛先アプリケーション・フローはそれぞれ、フロー名に指定されているポート番号の <span class="msobjpropval">localhost</span> を使用するようにセットアップされています。
したがって、例えば、DestinationApplicationListensOnPort2222 の接続の詳細は <span class="msobjpropval">localhost:2222</span> に設定されています。
</p>
    <p>
<span class="msobjpropval">TestApplication</span> プロジェクト・フローの接続の詳細は、パターン・インスタンスのデフォルトの接続の詳細と一致します。
パターン・インスタンスの構成で接続の詳細を変更した場合は、テスト・アプリケーションのフローに含まれる接続の詳細も変更する必要があります。
</p>
    <h3 class="sectiontitle">フロー・デバッガーを使用してパターンをテストする
</h3>
    <p>
フロー・デバッガーを使用してパターンをテストするには、IBM Integration Bus の資料にある『メッセージ・フロー・アプリケーションのテストとデバッグ』を読んでください。
HL7DFDLInput および HL7DFDLOutput ノードでフロー・デバッガーを使用するには、これらのノードで使用するサブフローをインポートする必要があります。
<a href = "resources.htm#resources">「<span>Healthcare: HL7 to HL7 DFDL」</span>パターンのリソース</a>を参照してください。
</p>
</div>
<div class="section">
    <a name="test"></a> <h2 class="sectiontitle">HL7 テスト・アプリケーション</h2>
    <p>
HL7 テスト・アプリケーションを使用すると、MLLP を使って Integration ノードとの間で HL7 メッセージを送受信することができます。
このアプリケーションは、1 つのソース臨床アプリケーションと 1 つの宛先臨床アプリケーションをシミュレートできます。
このテスト・アプリケーションは、異なる MLLP 構成やメッセージの順序付けをシミュレートするオプションを提供しています。
また、テスト・データとして使用するパターン・リソースの形で HL7 メッセージが提供されています。
<a href = "resources.htm#resources">「<span>Healthcare: HL7 to HL7 DFDL」</span>パターンのリソース</a>を参照してください。
</p>
    <p>
   	HL7 テスト・アプリケーションを開始するには、次の手順を実行します。
<ol>
    	<li><span class="uicontrol">「ファイル」>「新規」>「その他」</span>をクリックします。</li>
    	<li><span class="uicontrol">「Healthcare」</span>フォルダーで、<span class="uicontrol">「HL7 テスト・アプリケーション (HL7 Test Application)」</span>を選択し、<span class="uicontrol">「次へ」</span>をクリックします。
</li>
    	<li>テスト・アプリケーション設定のコンテナーおよびファイル名を入力し、<span class="uicontrol">「終了」</span>をクリックします。
HL7 テスト・アプリケーションが開始します。
</li>
    </ol>
    </p>
</div>
<div class="section">
    <a name="messages"></a> <h2 class="sectiontitle">HL7 メッセージ</h2>
    <p>
HL7 メッセージは、セグメントとフィールドに分割されます。
セグメント間の境界は、送信側アプリケーションに応じて異なることがあります。
テスト・アプリケーションに使用されるサンプル・メッセージでは、16 進文字の
   <span class="msobjpropval">
    0D
    </span>
    および
            <span class="msobjpropval">
            0A
    </span>
    が使用されます。セグメント内のフィールドは、すべての HL7 メッセージの始めの MSH セグメントで宣言する文字を使って分離されます。デフォルトは縦線文字 (|) です。
セグメントは、最初のフィールドで識別されます。
次の例には、MSH、EVN、PID、および PV1 という 4 つのセグメントがあります。
MSH セグメントはメッセージのヘッダーで、これに含まれるいくつかのフィールドについてこのトピックで説明しています。
</p>
    <p>
次の例は、典型的な HL7 メッセージ (ADT A01) を示しています。
読みやすくするために改行が追加されています。</p>
    <pre>MSH|^~\&amp;|HL7ABLAB|HNA500|HNAM|HNAM|20090911132151||ADT^A01|
Q30235031T29347435X328970|A|2.3|123
EVN|A01|20090911132100|||^DRONE_PM1^DRONE_PM^^^^^^^Personnel
PID|1||1357920591||IntFace1101A^WinTask^^^^^Current||19801117|M||||||||||
10000476524^^^FIN^FIN NBR|100000451||||||0
PV1|1|Inpatient|CD:16067689^CD:16067691^CD:16067741^Uniontown Hospit^^Bed(s)
^Uniontown Hospit||||||||||||||501455^Orr^Maggi^^^^^^External ID^Personnel^^^
External
Identifier~25584^Orr^Maggi^^^^^^PERSONNEL PRIMARY
IDENTIFIER^Personnel^^^Personnel Primary Identifier|Inpatient|||||||||||||||||||
||
Uniontown Hospit||Active|||20090911132100
    </pre>
</div>
<div class="section">
    <a name="setup"></a> <h2 class="sectiontitle">基本的なパターン・インスタンスのセットアップ</h2>
    <p>
    パターン・インスタンスのメイン・メッセージ・フローは、以下のとおりです。
    </p>
    <ul>
        <li>
            Receiver
        </li>
        <li>
            TransformAndRoute<var>n</var>
        </li>
        <li>
            Dest<var>n</var>Sender
        </li>
    </ul>
    <p>
さらに多くの宛先を持つパターン・インスタンスを作成するには、追加の Dest<var>n</var>Sender フローを作成します (<var>n</var> は宛先の番号です)。
</p>
    <p>
パターン・インスタンス用にすべてのキューをセットアップしたことを確認する必要があります。<a href="management.htm">「Healthcare: HL7 to HL7」パターン・インスタンスの管理</a>の『キュー』セクションを参照してください。
</p>
</div>
<div class="section">
    <a name="flow"></a> <h2 class="sectiontitle">パターン・インスタンスでの情報のフロー</h2>
    <p>
テスト・アプリケーションを使用してメッセージを送信すると、情報が以下の順序でパターン・インスタンスを通って流れます。
</p>
    <ol>
        <li>
メッセージが HL7_TEST_IN キューに書き込まれ、SourceApplication フローによって取り上げられます。
</li>
        <li>
SourceApplication フローは、メッセージに MLLP バイトを追加した後、TCP/IP 経由でパターン・インスタンスに送信します。
</li>
        <li>
メッセージは受信側メッセージ・フローに到着し、ここで MLLP バイトが切り取られます。
</li>
        <li>
            メッセージ内の MSH セグメントが解析されます。
</li>
        <li>
パターン・インスタンスのセットアップで重複メッセージ・オプションと順序付けオプションがオンに設定されていれば、メッセージの重複がチェックされ、順序付けが設定されます。
</li>
        <li>
肯定応答 (ACK) メッセージが SourceApplication フローに送り返されます。
</li>
        <li>
メッセージは RXF<var>n</var> キューに送信されます (<var>n</var> は宛先の番号)。
メッセージは TransformAndRoute<var>n</var> メッセージ・フローによって RXF<var>n</var> キューから取り上げられます (<var>n</var> は宛先の番号)。
<p>
メッセージまたはセグメントのフィルタリングをセットアップした場合、フィルター処理はこのフローの中で実行されます。
パターン・インスタンスのセットアップに応じて、このフローには、メッセージ内の残りやメッセージの正規形式をパブリッシュするノードも含まれることがあります。
</p>
        </li>
        <li>
メッセージは XML に変換され、各宛先フローに送信されます。
</li>
        <li>
宛先フローの中で、メッセージは DestinationApplication フローに送信されます。
このフローは ACK メッセージで応答します。
</li>
        <li>
ACK メッセージが宛先フローによって処理されます。
</li>
        <li>
セットアップしたパターン・インスタンス構成によっては、メッセージが再順序付けされ、宛先に再度送信されることもあります。
</li>
    </ol>
    <p>
    すべてのフローには、そのフローによってキャッチされた問題を処理する、例外処理のサブフローもあります。
</p>
</div>
<div class="section">
    <a name="options"></a> <h2 class="sectiontitle">その他のオプション
</h2> <h3>順序付け</h3>
    <p>
パターン・インスタンスの順序付けをセットアップするため、<span class="msobjprop">「オプション」</span>グループのパラメーターを使用できます。
順序付けについて
    <span class="msobjpropval">
    「到着ベース」
        </span>
        オプションを選択した場合、メッセージの正しい順序は、パターン・インスタンスにメッセージが届いた順序に基づいて決まります。順序付けについて
    <span class="msobjpropval">
    「内容ベース」
        </span>
        オプションを選択した場合は、メッセージの MSH セグメントにある 13 番目のフィールドの値 (例の中では、<code>123</code>) がシーケンス番号として使用されます。
    受信側メッセージ・フローがパターン・インスタンスの順序付けをセットアップし、メッセージのシーケンス番号を取ります。
</p>
    <p>
メッセージは、それぞれの宛先フローの中で再順序付けされます。
宛先ごとに、厳密な順序付けまたは緩い順序付けを選択できます。
厳密な順序付けを選択した場合に、あるメッセージが欠落すると、そのメッセージが到着するまで残りのメッセージは保留になるため、フローが無期限にブロックされる可能性があります。
緩い順序付けを選択した場合は、あるメッセージが欠落したとき、フローが欠落したメッセージを待機するのをやめてメッセージの処理を続行するまでの時間を指定します。
</p>
    <p>
順序付けオプションをテストするには、メッセージがパターン・インスタンスに送信される順序を操作するか、メッセージに含まれるシーケンス番号を変更するか、または処理中にメッセージをキューから取り去ります。
</p>
    <h3>重複の処理</h3>
    <p>
<span class="msobjprop">「重複をチェック」</span>パラメーターを選択すると、重複をチェックするための追加のノードが受信側メッセージ・フローに含まれるようになります。
メッセージの MSH セグメントにある 10 番目のフィールド (このトピックの例では <code>Q30235031T29347435X328970</code>) に、メッセージの重複をチェックするために使用されるメッセージ制御 ID が含まれます。
メッセージは、フローによって処理された後、チェックできるようにキューに保存されます。
<span class="msobjprop">「重複をチェック」</span>サブフローが重複したメッセージをチェックします。
メッセージが重複していなければ、処理は通常どおりに続行されます。
しかし、メッセージが重複していることが分かると、ACK メッセージがオンに設定されている場合は、元の ACK メッセージが送信側アプリケーションに返されます。
ACK メッセージがオフに設定されている場合は、重複したメッセージは、フローに新しいメッセージが到着した時と同様に処理されます。
</p>
    <p>
重複の処理をテストするには、メッセージ内の MSH セグメントの 10 番目のフィールドを操作してください。
</p>
    <h3>ACK および NACK メッセージの送信
</h3>
    <p>
<span class="msobjprop">「肯定応答の送信」</span>パラメーターが選択されている場合は、メッセージが受信側メッセージ・フローによって処理された後、パターン・インスタンスから送信側アプリケーションに ACK メッセージが送信されます。
このアクションにより、メッセージが正常に処理されたことが送信側アプリケーションに通知されます。
SourceApplication メッセージ・フローには、ACK メッセージと否定応答 (NACK) メッセージを処理するように構成されたノードがあります。
メッセージの処理で問題が発生した場合は、代わりに NACK メッセージが送信側アプリケーションに送信されます。
</p>
    <p>
さらに、宛先アプリケーションが受信したメッセージを正常に処理した後、宛先アプリケーションからパターン・インスタンスに送り返される ACK メッセージを処理するノードが、宛先フローにも含まれています。
</p>
    <h3>ジャーナリング
</h3>
    <p>
パターン・インスタンス構成の<span class="msobjprop">「オプション」</span>グループに含まれるいくつかのパラメーターを使用すると、メッセージ処理の際にログに記録する情報を選択できます。
</p>
    <ul>
        <li>
            <span class="msobjprop">
            ジャーナリング
            </span>
            . このパラメーターはオン/オフを切り替えることができます。
ジャーナリングでは、ソース・メッセージのコピーがメッセージ・キューに書き込まれるか、メッセージがトピックに対してパブリッシュされます。
そのメッセージには、ソース・メッセージ・フロー、Integration ノード名、およびパターン・インスタンス名を記述する追加のメタデータが書き込まれます。
ジャーナリングは、Integration ノードに送信されたすべての入力メッセージのコピーを保持するために使用します。
保持したメッセージは、監査の観点で価値があります。
キューが無限に大きくなることを避けるため、一定の期間 (例えば、1 週間) を経過した後にメッセージが期限切れになるようにジャーナル・キューを構成できます。
</li>
        <li>
            <span class="msobjprop">
            パブリッシュ
            </span>
            . <span class="msobjprop">
            「ジャーナリング」
            </span>
            を選択した場合は、
            <span class="msobjprop">
            「パブリッシュ」
            </span>
            パラメーターを変更して、メッセージのパブリッシュ先をトピックにするかキューにするかを決定できます。
        </li>
        <li>
            <span class="msobjprop">
            正規のフィード
            </span>
            および
            <span class="msobjprop">
            ソース・フィード
            </span>
            . メッセージをログに記録するかどうかを選択できます。
</li>
        <li>
            <span class="msobjprop">
            剰余の報告
            </span>
            . 剰余をログに記録するかどうかを選択できます。
剰余は、HL7v25P メッセージ・セットによってモデル化されないフィールドです。
</li>
    </ul>
    <h3>メッセージおよびセグメントのフィルタリング
</h3>
    <p>
    <span class="msobjprop">
    メッセージ・フィルタリング
    </span>
    メッセージの MSH セグメントの 9 番目のフィールド (このトピックの例では <code>ADT^A01</code>) にあるイベント・タイプに基づいてメッセージをフィルター処理できます。ソース・アプリケーションから届くすべてのメッセージがすべての宛先で必要になるわけではありません。
メッセージ・フィルタリングを使用すると、特定の宛先から特定のメッセージを除外できます。
メッセージ・フィルタリングは、宛先単位で構成できます。
</p>
    <p>
    メッセージ・フィルターを指定する際、9 番目のフィールドは、
    <span class="msobjprop">
    「コード」
    </span>
    および
            <span class="msobjprop">
            「イベント」
    </span>
    に対する値を提供しています。2 つの値は曲折アクセント記号 (^) で区切ります。
この資料の冒頭にあるサンプル・メッセージでは、<span class="msobjprop">「コード」</span>は <span class="msobjpropval">ADT</span>、<span class="msobjprop">「イベント」</span>は <span class="msobjpropval">A01</span> です。
順序付けがオンの場合に、あるメッセージがフィルターで除外されると、順序を維持するために所定の位置でダミー・メッセージが送信されます。
</p>
    <p>
    <span class="msobjprop">
    セグメント・フィルタリング
    </span>
    宛先に送信される時点でメッセージから削除されるセグメントを指定できます。セグメント・フィルタリングを使用すると、宛先に渡される前にメッセージからセグメントを削除できます。
ソース・アプリケーションから送信されるすべてのメッセージ・セグメントをサポートしていない宛先に対しては、このオプションを使用すれば、特定のセグメント (例えば、HL7 メッセージに対する Z セグメントと呼ばれる拡張部分) をフィルターで除外できます。
セグメント・フィルタリングは、宛先単位でオンに設定できます。
</p>
    <p>
セグメントは、3 文字のコード (サンプル・メッセージでは、MSH、EVN、PID、および PV1) によって指定します。
MSH セグメントはメッセージ・ヘッダーで、ユーザーから指定されてもフィルターで除外されません。
</p>
</div>
<a href="overview.htm#anchorBack" title="戻る">「Healthcare: HL7 to HL7 DFDL」パターンの仕様に戻る</a>
<p>
</p>
</body>
</html>
