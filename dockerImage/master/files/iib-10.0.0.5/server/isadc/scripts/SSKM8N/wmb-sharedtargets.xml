<project name="wmb-sharedtargets">

	<!-- need to set the classpath to include the latest plugin -->

	<dirname property="wmb.shared.targets.basedir" file="${ant.file.wmb-sharedtargets}" />
	<dirname property="wmb.shared.targets.parentdir" file="${wmb.shared.targets.basedir}" />
	<dirname property="wmb.shared.targets.bundle.basedir" file="${wmb.shared.targets.parentdir}" />

	<import>
		<javaresource name="scripts/sharedtargets.xml"/>
	</import>
	<import>
		<javaresource name="scripts/sharedelements/sharedelements-sharedtargets.xml"/>
	</import>
	
	<property name="autopd.echolog.instance" value="${autopdtmp}/Output.txt" />
	<taskdef file="${wmb.shared.targets.bundle.basedir}/properties/SSKM8N/wmbtasks.properties" />

	<target name="determine_os_properties" description="Determines OS related propertie" > 

		<condition property="isUnix" >
		  <or>
    		<os name="AIX" />
	        <os name="Linux" />
    	    <os name="SunOS" />
        	<os name="HP-UX" />
		  </or>
		</condition>
	
		<if isTrue="${isWindows}">
			<property name="osType" value="windows" />
			
		</if>

	</target> 

	<target name="determine_install_root" >
		
		<property environment="env1"/>
		
		<available file="${env1.MQSI_FILEPATH}" type="dir" property="wmb.root.dir.exists" /> 
		
		<if isTrue="${wmb.root.dir.exists}" >
			<property name="wmb.root" value="${env1.MQSI_FILEPATH}" /> 
		</if> 
		<if isNotTrue="${wmb.root.dir.exists}" >
			<inputdialogtask>
				<fieldtask name="prompt" label="Input_Required"
					type="prompt" bundle="properties/SSKM8N/autopd" />
				<fieldtask name="wmb.root"
					bundle="properties/SSKM8N/autopd" type="filebrowser"
					label="Input_WMB_root" defaultValue="" initialValueSource="persisted" />
			</inputdialogtask>
		</if> 
		
<!--		
		<if isTrue="${isUnix}">
			<property name="install.file.name" value="/var/mqsi/install.properties" /> 
		</if> 
		<if isTrue="${isWindows}"> 
			<available file="${env1.ALLUSERSPROFILE}/Application Data/IBM/MQSI/install.properties" 
				type="file" property="install.file.available"/> 
			<available file="${env1.ALLUSERSPROFILE}/IBM/MQSI/install.properties" 
				type="file" property="install.file.available1"/> 
			
			<if isTrue="${install.file.available}"> 
				<property name="install.file.name" value="${env1.ALLUSERSPROFILE}/Application Data/IBM/MQSI/install.properties" /> 
			</if> 
			<if isTrue="${install.file.available1}"> 
				<property name="install.file.name" value="${env1.ALLUSERSPROFILE}/IBM/MQSI/install.properties" /> 
			</if> 
		</if> 

		<available type="file" file="${install.file.name}" property="install.file.available.true" /> 
		
		<if isTrue="${install.file.available.true}" >
			<installroot filename="${install.file.name}" InstallRoot="InstallRoot" hasMultInstallRoot="hasMultInstallRoot" installRootSuccess="installRootSuccess"/>
			
			<if isTrue="${installRootSuccess}" > 

				<autopdreplace property="InstallRoot" token="\\:" value="!!"/>
				<autopdreplace property="InstallRoot" token="!!" value=":"/>
				
				<autopdreplace property="InstallRoot" token="\\ " value="@@"/>
				<autopdreplace property="InstallRoot" token="@@" value=" "/>
				
				<autopdreplace property="InstallRoot" token="\\\\" value="!!"/>
				<autopdreplace property="InstallRoot" token="!!" value="\\"/>
				
				<echo message="Install root processed is ${InstallRoot}"/> 
				
				<if isNotTrue="${hasMultInstallRoot}">
					<property name="wmb.root" value="${InstallRoot}" /> 
				</if> 
				<if isTrue="${hasMultInstallRoot}">
					<inputdialogtask> 
						<fieldtask name="prompt" label="Multiple_Install_Locations_Detected"
							type="prompt" bundle="properties/SSKM8N/autopd" />
						<fieldtask name="wmb.root"
							bundle="properties/SSKM8N/autopd" label="Select_Install_Location"
							type="selectlist" list="${InstallRoot}" listDetails="${InstallRoot}" delimiter="," />
					</inputdialogtask>
				</if> 
			</if> 
		</if> 
 
		<if isNotTrue="${install.file.available.true}" > 
			<inputdialogtask>
				<fieldtask name="prompt" label="Input_Required"
					type="prompt" bundle="properties/SSKM8N/autopd" />
				<fieldtask name="wmb.root"
					bundle="properties/SSKM8N/autopd" type="filebrowser"
					label="Input_WMB_root" defaultValue="" initialValueSource="persisted" />
			</inputdialogtask>
		</if>
--> 		
<!-- We now have wmb.root set --> 
		<available file="${wmb.root}/bin" type="dir" property="wmb.dir.exists" />

		<if isTrue="${wmb.dir.exists}">
			<persistproperty property="wmb.root" />
		</if>

		<if isNotTrue="${wmb.dir.exists}">
			<echo message="The WebSphere Message Broker directory '${wmb.root}' does not exist. Skipping data collection" />
			<fail> The WebSphere Message Broker directory '${wmb.root}' does not exist. Skipping data collection. </fail>
		</if>
<!-- Validation complete --> 
	</target> 
		
	<target name="initialize_wmb_environment" > 
		<property environment="env1"/>
				
				<available file="${env1.MQSI_WORKPATH}" type="dir" property="wmb.work.dir.exists" /> 
		<echo message="" /> 
		<stepcount />
		<autopdtimestamp property="autopdts" pattern="${timepattern}" /> 
		<wsnlsecho key="Build_Dynamic_Environment"
		           bundle="properties/SSKM8N/autopd"
		           message="[{0}] Step {1}: Determine Message Broker and other required variables..."
		           replace="${autopdts};;${step.count}"
		           id="1100"
		           level="info" />
		    
		<if isTrue="${isAIX}">
			<property name="execution.name" value="oslevel -s" /> 
		</if> 
		<if isNotTrue="${isAIX}"> 
			<property name="execution.name" value="uname -a" /> 
		</if> 
		<property name="javacore.name.win" value="${env1.MQSI_WORKPATH}/common/errors" />
		<property name="javacore.name.unix" value="ls -lt ${env1.MQSI_WORKPATH}/common/errors" />
		<copy file="${wmb.shared.targets.parentdir}/SSKM8N/execution-scripts/windows/common-setup.bat"
			tofile="${autopdtmp}/autopd/execution-scripts/common-setup-filled.bat"
			overwrite="true">
			<filterset>
				<filter token="wmb.root" value="${wmb.root}" />
				<filter token="javacore.name.win" value="${javacore.name.win}" />
			</filterset>
		</copy>

		<copy file="${wmb.shared.targets.parentdir}/SSKM8N/execution-scripts/unix/common-setup.sh"
			tofile="${autopdtmp}/autopd/execution-scripts/common-setup-filled.sh"
			overwrite="true">
			<filterset>
				<filter token="wmb.root" value="${wmb.root}" />
				<filter token="execution.name" value="${execution.name}" />
				<filter token="javacore.name.unix" value="${javacore.name.unix}" />
			</filterset>
		</copy>

		<chmod file="${autopdtmp}/autopd/execution-scripts/common-setup-filled.sh" perm="766"/>
		
		<exec executable="${autopdtmp}/autopd/execution-scripts/common-setup-filled.bat"
		      dir="${autopdtmp}/autopd"
		      output="${autopd.echolog.instance}"
		      append="true"
		      os="${os.windows}">
			<arg line="" />
		</exec>

		<exec executable="${autopdtmp}/autopd/execution-scripts/common-setup-filled.sh"
		      dir="${autopdtmp}/autopd"
		      output="${autopd.echolog.instance}"
		      append="true"
		      os="${os.unixkind}">
			<arg line="" />
		</exec>	
		
	
		<if isTrue="${isLinux}">
			<copy file="${wmb.shared.targets.parentdir}/SSKM8N/execution-scripts/unix/osDetails.sh"
				tofile="${autopdtmp}/autopd/execution-scripts/osDetails-filled.sh"
				overwrite="true">
				<filterset>
					<filter token="wmb.root" value="${wmb.root}" />
				</filterset>
			</copy>
			<chmod file="${autopdtmp}/autopd/execution-scripts/osDetails-filled.sh" perm="766"/>
			<exec executable="${autopdtmp}/autopd/execution-scripts/osDetails-filled.sh"
			      dir="${autopdtmp}/autopd"
			      output="${autopdtmp}/autopd/operatingSystemDetails.txt"
			      append="true"
			      os="${os.unixkind}">
				<arg line=" "/>
			</exec> 
			
		</if> 
	</target> 

	<!-- ODBC related files are split across two env variables.  1) ODBCSYSINI points to a directory location
	and the filename is fixed 'odbcinst.ini'.  2) ODBCINI points to a file with absolute path. -->
	
	<target name="collect_odbcini_files" >
			
			<property environment="env2"/>
			<available file="${env2.ODBCSYSINI}" type="dir" property="wmb.odbc.dir.exists" /> 
			<if isTrue="${wmb.odbc.dir.exists}" >
				<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
					<zipfileset dir="${env2.ODBCSYSINI}" prefix="${autopdProblem}/common">
						<include name="odbcinst.ini"/> 
					</zipfileset>
				</zip> 
			</if> 
	       <available file="${env2.ODBCINI}" type="file" property="wmb.odbcini.file.exists" /> 
		   <if isTrue="${wmb.odbcini.file.exists}" >
				<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
					<zipfileset file="${env2.ODBCINI}" prefix="${autopdProblem}/common" >
					</zipfileset>
				</zip> 
			</if>

	</target>
	
	<target name="collect_fixinstaller_files" >
		
		<property environment="env"/>
		
		<available file="${env.MQSI_FILEPATH}" type="dir" property="wmb.root.dir.exists" /> 
		
		<if isTrue="${wmb.root.dir.exists}" >

			<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
				<zipfileset dir="${env.MQSI_FILEPATH}" prefix="${autopdProblem}/common">
						<include name="mqsifixinst.dat"/> 
						<include name="mqsifixinst.log"/> 
				</zipfileset>
			</zip> 
			
	       </if> 
	</target>
	
	<target name="collect_required_files"> 
		<echo message="" /> 
		<stepcount />
		<autopdtimestamp property="autopdts" pattern="${timepattern}" /> 
		<wsnlsecho key="Collecting_Output_Files"
		           bundle="properties/SSKM8N/autopd"
		           message="[{0}] Step {1}: Collecting all output files..."
		           replace="${autopdts};;${step.count}"
		           id="1100"
		           level="info" />
		
		<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
			<zipfileset dir="${autopdtmp}/autopd" prefix="${autopdProblem}/common" >
				<include name="*.txt" />
			</zipfileset> 
			<zipfileset dir="${autopdtmp}" prefix="autopdzip/log" >
				<include name="Output.txt" /> 
			</zipfileset> 
		</zip> 
		
	</target> 
		
	<target name="run_cisa_scan" >
		<echo message=" " />
		<stepcount />
		<autopdtimestamp property="autopdts" pattern="yyyy.MM.dd-HH.mm.ss.SSSz" />
		<wsnlsecho key="Run_CISA_Scan"
		           bundle="properties/SSKM8N/autopd"
		           message="[{0}] Step {1}: Running the CISA Scan..."
		           replace="${autopdts};;${step.count}" />
		
		 <!--  Add the CISA inventory Report   --> 
		<if isNotTrue="${isOS400}||${isHPUX}">
			<collect_cisa_inventory_info filename="${autopdtmp}/autopd/inventory_rcf.xml" criteria="default.HardwareSoftwareFixes" /> 
			<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
				<zipfileset dir="${autopdtmp}/autopd" prefix="autopdzip/autopd">
		  			<include name="inventory_rcf.xml" /> 
		 		</zipfileset>
			</zip>
		</if>
		
	</target>
	
	<target name="ftp_to_ecurep" 
		depends="zip_autopd_log, ftp_message_shared, ftp_collected_information_shared" >
	</target>

	
	<target name="collect_event_viewer_logs" if="isWindows" > 
		
		<echo message="" /> 
		<stepcount />
		<autopdtimestamp property="autopdts" pattern="${timepattern}" /> 
		<wsnlsecho key="Collecting_Event_Viewer_Logs"
		           bundle="properties/SSKM8N/autopd"
		           message="[{0}] Step {1}: Collecting Event Viewer logs..."
		           replace="${autopdts};;${step.count}"
		           id="1100"
		           level="info" />
		<!-- Defect 23304--> 
		
		<autopdproperty name="system.event.vbs.path.fixed" 
			value="${wmb.shared.targets.bundle.basedir}/scripts/SSKM8N/execution-scripts/windows/save_event_files.vbs" /> 
		<autopdproperty name="autopdtmp.fixed" value="${autopdtmp}/autopd/" /> 
		<autopdproperty name="target.out.file" value="${autopdtmp}/autopd/Vbs_Output.txt" />
			
		<exec executable="cscript" failonerror="false" failifexecutionfails="false"
		 		os="${os.windows}" append="true" error="${target.out.file}"
				output="${target.out.file}">
			<arg value="${system.event.vbs.path.fixed}"/>
			<arg value="${autopdtmp.fixed}"/>
		</exec> 
		<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
			<zipfileset dir="${autopdtmp.fixed}" prefix="${autopdProblem}/logs" >
				<include name="AppEvent.evt" />
				<include name="AppEvent.txt" /> 
<!--			<include name="SysEvent.evt" /> 
				<include name="SysEvent.txt" /> --> 
			</zipfileset> 
			<zipfileset dir="${autopdtmp.fixed}" prefix="autopdzip/logs" >
				<include name="Vbs_Output.txt" />
			</zipfileset> 
		</zip> 
			
	</target> 
	
	<target name="collect_failure_logs" if="isUnix" > 

		<echo message="" /> 
		<stepcount />
		<autopdtimestamp property="autopdts" pattern="${timepattern}" /> 
		<wsnlsecho key="Collecting_Syslog_Logs"
		           bundle="properties/SSKM8N/autopd"
		           message="[{0}] Step {1}: Collecting Failure (Syslog) logs..."
		           replace="${autopdts};;${step.count}"
		           id="1100"
		           level="info" />

		<!-- Parse /etc/syslog.conf to get the user* variable --> 
		<property name="syslog_conf_file_location" value="/etc/syslog.conf" /> 
		<available file="${syslog_conf_file_location}" type="file" property="syslog_conf_exist" /> 
		
		<if isTrue="${syslog_conf_exist}" > 
			
			<echo message="syslog.conf file is found at ${syslog_conf_file_location}"/> 
			<syslog filename="${syslog_conf_file_location}" 
				userDebug="user_debug" userInfo="user_info" userError="user_error" userWarn="user_warn" userSplat="user_splat" />
<!--			
			<echo message="UserDebug is ${user_debug}" />
			<echo message="UserInfo is ${user_info}" />
			<echo message="UserError is ${user_error}" />
			<echo message="UserSplat is ${user_splat}" />
--> 			
			<condition property="is.user.debug" > 
				<isset property="user_debug" /> 
			</condition> 
			<condition property="is.user.info" > 
				<isset property="user_info" /> 
			</condition> 
			<condition property="is.user.error" > 
				<isset property="user_error" /> 
			</condition> 
			<condition property="is.user.warn" > 
				<isset property="user_warn" /> 
			</condition> 
			<condition property="is.user.splat" > 
				<isset property="user_splat" /> 
			</condition> 
				
			<if isTrue="${is.user.debug}" >
				<echo message="Collecting User Debug file from the location ${user_debug}"/> 
				<basename property="user_debug_file" file="${user_debug}"/>
				<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
					<zipfileset file="${user_debug}" fullpath="${autopdProblem}/logs/syslog_${user_debug_file}" >
					</zipfileset> 
				</zip> 
			</if> 
			<if isTrue="${is.user.info}" > 
				<echo message="Collecting User Info file from the location ${user_info}"/> 
				<basename property="user_info_file" file="${user_info}"/>
				<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
					<zipfileset file="${user_info}" fullpath="${autopdProblem}/logs/syslog_${user_info_file}" >
					</zipfileset> 
				</zip> 
			</if> 
			<if isTrue="${is.user.error}" > 
				<echo message="Collecting User Error file from the location ${user_error}"/>
				<basename property="user_error_file" file="${user_error}"/>
				<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
					<zipfileset file="${user_error}" fullpath="${autopdProblem}/logs/syslog_${user_error_file}" >
					</zipfileset> 
				</zip> 
			</if> 
			<if isTrue="${is.user.warn}" > 
				<echo message="Collecting User Warn file from the location ${user_warn}"/>
				<basename property="user_warn_file" file="${user_warn}"/>
				<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
					<zipfileset file="${user_warn}" fullpath="${autopdProblem}/logs/syslog_${user_warn_file}" >
					</zipfileset> 
				</zip> 
			</if> 
			<if isTrue="${is.user.splat}" > 
				<echo message="Collecting User Splat file from the location ${user_splat}"/>
				<basename property="user_splat_file" file="${user_splat}"/>
				<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
					<zipfileset file="${user_splat}" fullpath="${autopdProblem}/logs/syslog_${user_splat_file}" >
					</zipfileset> 
				</zip> 
			</if> 
				

		
		</if> 
		
		<if isNotTrue="${syslog_conf_exist}" >
			<!-- Feature 26624 --> 
			<!-- Parse syslog-ng.conf to get the destination variable --> 
			<property name="syslogNg_conf_file_location" value="/etc/syslog-ng/syslog-ng.conf" /> 
			<available file="${syslogNg_conf_file_location}" type="file" property="syslogNg_conf_exist" /> 
			
			<if isTrue="${syslogNg_conf_exist}" > 
				<echo message="syslog-ng.conf is found at ${syslogNg_conf_file_location}"/> 
				<syslogNg filename="${syslogNg_conf_file_location}" 
					filter="filter" destination="destination" logOutputRecord="logOutputRecord"  />
				<echo message="Desitination is ${destination}"/> 
				<available file="${destination}" type="file" property="destination_file_available" />	
				<if isTrue="${destination_file_available}">
					<basename property="destination_file" file="${destination}"/>
					<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
						<zipfileset file="${destination}" fullpath="${autopdProblem}/logs/syslog_${destination_file}" >
						</zipfileset> 
					</zip> 
					
				</if>
			</if>
			<if isNotTrue="${syslogNg_conf_exist}" > 
				<echo message="We were not able to find /etc/syslog.conf on your system.."/> 
				<echo message="Or the /etc/syslog-ng/syslog-ng.conf file" /> 
				<echo message="Either the files do not exist or the files could not be read by the user running MQSIDC"/> 
				
			</if> 
		
		</if> 
		
	
	</target> 

</project> 