/* 
 * Licensed Materials - Property of IBM
 *
 * (C) Copyright IBM Corp. 2016 All Rights Reserved
 * 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 */    


var logging = require('../lib/logging.js');
 
 
module.exports = mixinDiscovery;

function mixinDiscovery(SFConnector) {
	/**
   * Discover model definitions
   *
   * @param {Object} options Options for discovery
   * @param {Function} [cb] The callback function
   */
  
 
  SFConnector.prototype.discoverModelDefinitions = function (options, cb) {
	var self = this;	
	var message = {"message":"Salesforce discoverModelDefinitions method entry"};	 
     self.clogger.info(message);  
	 
	if (!cb && typeof options === 'function') {
      cb = options;
      options = {};
    }
    options = options || {};
	
	if (!this.dataSource.connecting) {
	  this.dataSource.connect();
	}
	
    
	if (!this.dataSource.connected) {
	    return this.dataSource.once('connected', function () {
	      self.sfconn.describeGlobal(function(err, res) {
				if (err) { return console.error(err);
				 var message = {"message":"Salesforce Connector discoveryModelDefinition error"};
				var obj ={"message":"Exception occured while getting the execution","error":err};
				self.clogger.error(message,obj);
				}
				var message = {"message":"Salesforce Connector discoveryModelDefinition successful "};
				self.clogger.info(message);
				cb(err,res.sobjects);
	  // ...
		});
	    }.bind(this));
	}else{
		self.sfconn.describeGlobal(function(err, res) {
		  if (err) {  
		  	var message = {"message":"Salesforce Connector discoveryModelDefinition error"};
			var obj ={"message":"Exception occured while getting the execution","error":err};
			self.clogger.error(message,obj);
		  return console.error(err); }
		  var message = {"message":"Salesforce Connector discoveryModelDefinition successful "};
		 self.clogger.info(message);
		  cb(err,res.sobjects);
		  // ...
		});
	}
	 var message = {"message":"Salesforce discoverModelDefinitions exit"};
     self.clogger.info(message); 
  };

  
  /**
   * Discover model properties from a table
   * @param {String} table The table name
   * @param {Object} options The options for discovery
   * @param {Function} [cb] The callback function
   *
   */
  SFConnector.prototype.discoverModelProperties = function (SObject, options, cb) {
	var self = this;  
	  var message = {"message":"Salesforce discoverModelProperties method entry"};
    self.clogger.info(message);  
	if (!cb && typeof options === 'function') {
      cb = options;
      options = {};
    }
    options = options || {};
	if (!this.dataSource.connecting) {
	  this.dataSource.connect();
	}

    
	
	if (!this.dataSource.connected) {
	    return this.dataSource.once('connected', function () {
	      self.sfconn.describe(SObject, function(err, meta) {
				if (err) { 
			var message = {"message":"Salesforce Connector discoverModelProperties error"};
			var obj ={"message":"Exception occured while getting the execution","error":err};
			self.clogger.error(message,obj);
				return console.error(err); }
				var message = {"message":"Salesforce Connector discoverModelProperties successful "};
				self.clogger.info(message);
				cb(err,meta);
		});
	    }.bind(this));
	}else{
		self.sfconn.describe(SObject, function(err, meta) {
			
		  if (err) { 
		  
		  var message = {"message":"Salesforce Connector discoverModelProperties error"};
			var obj ={"message":"Exception occured while getting the execution","error":err};
			self.clogger.error(message,obj);
		  return console.error(err); }
		  var message = {"message":"Salesforce Connector discoverModelProperties successful "};
		self.clogger.info(message);
		  cb(err,meta);
		  // ...
		});
	} 
    var message = {"message":"Salesforce discoverModelProperties exit"};
     self.clogger.info(message); 
  };
  
  /**
   * Discover primary keys for a given table
   * @param {String} table The table name
   * @param {Object} options The options for discovery
   * @param {Function} [cb] The callback function
   */
  SFConnector.prototype.discoverSchemas = function (modelName, options, cb) {
	var self = this;
	 var message = {"message":"Salesforce discoverSchemas entry"};
     self.clogger.info(message); 
	this.discoverModelProperties(modelName,options,function(error,response){
		if (error) {
			 var message = {"message":"Salesforce Connector discoverSchemas error"};
			var obj ={"message":"Exception occured while getting the execution","error":err};
			self.clogger.error(message,obj);
	      cb && cb(error);
	      return;
	    }
		var fields = response.fields;
		if (!fields || fields.length === 0) {
	      cb && cb();
	      return;
	    }
		var schema = {
			name: modelName,
			options: {
				idInjection: false, // DO NOT add id property
				sObjectName : response.name
			},
			properties: {}
	    };
		
		Object.keys(response).forEach(function (key) {
		    if(key !== "fields"){
				if(key !== 'urls'){
					schema[key] = response[key];
				}
			}else{
				fields.forEach(function (field) {
					var fieldProperties = {};
					Object.keys(field).forEach(function (fieldProperty) {
						if(fieldProperty === "type"){
							if(field[fieldProperty] === "id"){
								fieldProperties["id"] = 1;
							}
							fieldProperties[fieldProperty] = salesforceDataTypeToJSONType(field[fieldProperty]);
						}else if(fieldProperty === "nillable"){
							fieldProperties["required"] = false;
						}else{
							fieldProperties[fieldProperty] = field[fieldProperty];
						}
					});
				    schema.properties[field.name] = fieldProperties;
				});
			}
		});
		options.visited = options.visited || {};
	    if (!options.visited.hasOwnProperty(modelName)) {
	      options.visited[modelName] = schema;
	    }
		cb && cb(null, options.visited);
		var message = {"message":"Salesforce Connector discoverSchemas successful "};
		self.clogger.info(message);
	});
	 var message = {"message":"Salesforce discoverSchemas method exit"};
     self.clogger.info(message); 
 
  };
  
   function salesforceDataTypeToJSONType(salesforceType) {
    var type = salesforceType.toLowerCase();
	type = type.trim();
    switch (type) {
      case 'combobox':
      case 'multipicklist':
        return 'Array';
      case 'base64':
      case 'byte':
        return 'Binary';
      case 'double':
      case 'int':
      case 'integer':
      case 'decimal':
      case 'long':
        return 'Number';
      case 'boolean':
        return 'boolean';
      default:
        return 'String';
    }
  }
}