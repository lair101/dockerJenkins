/* 
 * Licensed Materials - Property of IBM
 *
 * (C) Copyright IBM Corp. 2016 All Rights Reserved
 * 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 */    


var jsforce = require('jsforce');
var Connector = require('loopback-connector').Connector;
var logging = require('../lib/logging.js');
var logger;


module.exports = SFConnector;
var sfconn = null;
var clogger= null;
SFConnector.initialize = function (dataSource, callback) {
  var self = this;
  
  
 
  logger = logging.initializeLogging(dataSource.settings.configureLog4js);
  
  var message = {"message":"Salesforce Connector initialize method entry"};
  logger.info(message);
  var settings = dataSource.settings || {}; // The settings is passed in from the dataSource
  dataSource.connector = new SFConnector(settings); // Construct the connector instance
  dataSource.connector.dataSource = dataSource; // Hold a reference to dataSource
  var message = {"message":"Salesforce Connector initialize method  exit"};
  logger.info(message);
if(self.debug){
    logger.info("-->Salesforce Connector [debug]: dataSource.settings");
    logger.info(dataSource.settings);
  } 
 
}

/*
Constructor 
*/
function SFConnector(settings){
  var self = this;
  
  var message = {"message":"Salesforce Connector contructor method entry"};
  logger.info(message);
  self.clogger=logger;
  this.loginUrl     = settings.loginUrl ;
  this.username     = settings.username;
  this.password     = settings.password;
  this.clientId     = settings.clientId;
  this.clientSecret = settings.clientSecret;
  this.redirectUri  = settings.redirectUri;
  this.instanceUrl  = settings.instanceUrl;
  this.accessToken  = settings.accessToken;
  this.refreshToken  = settings.refreshToken;   
  this.debug        = settings.debug;
  this.settings = settings;
  this.settings.connectionTimeout = settings.connectionTimeout || 20000;
  this._models =  {};
  var message = {"message":"Salesforce Connector contructor method exit"};
  logger.info(message);
   if(self.debug){
   logger.info("-->Salesforce Connector [debug]: settings");
   logger.info(settings);
  } 
}

require('util').inherits(SFConnector, Connector);

SFConnector.prototype.connect = function(callback){
  var self = this;
  var message = {"message":"Salesforce Connector connect method entry"};
  logger.info(message);
  if(self.username && self.username.length>1){
      logger.info({"message":"Using username-password flow"});
	  self.sfconn = new jsforce.Connection({
		// you can change loginUrl to connect to sandbox or prerelease env.
		loginUrl : self.loginUrl,
		clientId : self.clientId,
		clientSecret : self.clientSecret
		//redirectUri : self.redirectUri
	  });
	  self.sfconn.login(self.username, self.password, function(err, userInfo) {
		if (err) { 
	   var message = {"message":"Salesforce Connector error"};
	  var obj ={"message":"Exception occured while getting the connection","error":err};
	  logger.error(message,obj);
		  callback(err);
		}else{
		  // connected
		  // Now you can get the access token and instance URL information.
		  // Save accessToken incase we need it for pure request calls.
		  self.accessToken = self.sfconn.accessToken;
		  // logged in user property
		  self.userInfo = userInfo;
		 // logger.info("-->Salesforce Connector [debug]:accessToken");
		    // logger.info(self.accessToken);
		  callback(null);  
		}
	  });
  }
  else if(self.refreshToken && self.refreshToken.length>1){
		logger.info({"message":"Setting access and refresh Token"});
		self.sfconn = new jsforce.Connection({
			oauth2: {
				clientId : self.clientId,
				clientSecret : self.clientSecret,
				redirectUri : self.redirectUri
			},
			instanceUrl: self.instanceUrl,
			accessToken : self.accessToken ,
			refreshToken : self.refreshToken 
		  });
	  callback(null);  
	  }
  else {
		logger.info({"message":"Setting access and not refresh Token"});
		self.sfconn = new jsforce.Connection({
			instanceUrl: self.instanceUrl,
			accessToken : self.accessToken
		  });
	  callback(null);  
	  }
  
   var message = {"message":"Salesforce Connector connect method exit"};
   logger.info(message);
}

SFConnector.prototype.logout = function(){
  var self = this;
   var message = {"message":"Salesforce Connector logout method entry"};
   logger.info(message);
  
  self.sfconn.logout(function(err) {
  if (err) { 
  var message = {"message":"Salesforce Connector logout method entry"};
  var obj = {"message":"Exception occured while logging out","error":err};
   logger.error(message,obj);
  }
  });
   var message = {"message":"Salesforce Connector logout method exit"};
   logger.info(message);
}

/**
 * Find matching model instances by the filter (read - get)
 * @param {String} model The model name
 * @param {Object} filter The filter
 * @param {Function} [callback] The callback function
 */
SFConnector.prototype.all = function all(model, filter, callback){
  var self = this;
  var message = {"message":"Salesforce Connector all method entry"};
   logger.info(message);
 if(self.debug){
    logger.info("-->Salesforce Connector [debug]: model");
    logger.info(model);
    logger.info("-->Salesforce Connector [debug]: filter");
    logger.info(filter);
    logger.info("-->Salesforce Connector [debug]: callback");
    logger.info(callback.toString());
  }

  var sObjectName = this.getsObjectName(model);
  /*return self.accessToken.once('on',{*/
  if(Object.keys(filter).length == 0){
    //no filter passed in, get all model	
	if (!this.dataSource.connected) {
	logger.info({"message":"datasource not connected ,its connecting"});
	
		 return this.dataSource.once('connected', function () {
		self.sfconn.sobject(sObjectName).find({}).execute(function(err, records) {
		  if (err) {
			var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"Exception occured while Execution","error":err};
            logger.error(message,obj);
			callback(err, err);
		  }else{
			    var message = {"message":"Salesforce Connector Get info successful"};
				//var obj = {"records":records};
             logger.info(message);
			callback(null, records);
		  }
		});
		}.bind(this));
	}
	else{
		logger.info({"message":"datasource already connected"});
		self.sfconn.sobject(sObjectName).find({}).execute(function(err, records) {
		  if (err) {  
		  var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"Exception occured while Execution","error":err};
            logger.error(message,obj);
			callback(err, err);
		  }else{
			  
			var message = {"message":"Salesforce Connector Get info successful"};
			//var obj = {"records":records};
             logger.info(message);
			callback(null, records);
		  }
		});
	
	}
		
	
  }else{
    // filter passed in
    var limit = 0;
    if(filter.limit){
      limit = filter.limit;
    }
    var whereJSON = {};
    if(filter.where){
      whereJSON = filter.where;
    }

    var selectFields = "*"; // default
    if(filter.fields){
      selectFields = filter.fields;
    }else{
      selectFields = "*";
    }

    var order = {}; 
    if(filter.order){
      order = {};
      var keys = filter.order;
      if (typeof keys ===  "string") {
        keys = keys.split(",");
      }
      for (var index = 0, len = keys.length; index < len; index++) {
        var temp = keys[index].split(" ");
        order[temp[0].trim()] = temp[1].trim();
      }
    }

    var skip = 0;
    if(filter.skip){
        skip = filter.skip;
    }

    if(filter.offset){
        skip = filter.offset;
    }

     if(self.debug){
      logger.info("-->Salesforce Connector [debug]: Limit");
      logger.info(limit);
      logger.info("-->Salesforce Connector [debug]: Where");
      logger.info(whereJSON);
      logger.info("-->Salesforce Connector [debug]: Fields");
      logger.info(selectFields);
      logger.info("-->Salesforce Connector [debug]: Order");
      logger.info(JSON.stringify(order, null, 4));
      logger.info("-->Salesforce Connector [debug]: skip");
      logger.info(skip);
    }
	
   if (!this.dataSource.connected) {
   logger.info({"message":"datasource not connected ,its connecting"});
		 return this.dataSource.once('connected', function () {
		 self.sfconn.sobject(sObjectName)
      .select(selectFields)   //  .select('*, Account.*') // asterisk means all fields in specified level are target.
      //.include("Cases")
      .where(whereJSON)
      .limit(limit)
      .offset(skip)
      .orderby(order)
      .execute(function(err, records) {
        if (err) { 
		var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"Exception occured while Execution","error":err};
            logger.error(message,obj);
          callback(err, err);
        }
		else{
		var message = {"message":"Salesforce Connector Get info successful"};
			//	var obj = {"records":records};
             logger.info(message);
        callback(null, records);
		}
    });
		}.bind(this));
	}
	else{
	 logger.info({"message":"datasource already connected"});
	 self.sfconn.sobject(sObjectName)
      .select(selectFields)   //  .select('*, Account.*') // asterisk means all fields in specified level are target.
      //.include("Cases")
      .where(whereJSON)
      .limit(limit)
      .offset(skip)
      .orderby(order)
      .execute(function(err, records) {
        if (err) { 
		var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"Exception occured while Execution","error":err};
            logger.error(message,obj);
          callback(err, err);
        }
		else
		{
		var message = {"message":"Salesforce Connector Get info successful"};
				//var obj = {"records":records};
             logger.info(message);
        callback(null, records);
		}
    });
	
	}
	var message = {"message":"Salesforce Connector all method exit"};
             logger.info(message);
  }

  /*});*/
  
}

/**
 * Create a new model instance for the given data (create - post)
 * @param {String} model The model name
 * @param {Object} data The model data
 * @param {Function} [callback] The callback function
 */
SFConnector.prototype.create = function (model, data, callback) {
  var self = this;
  var message = {"message":"Salesforce Connector Create method entry"};
  logger.info(message);
  if(self.debug){
    logger.info("-->Salesforce Connector [debug]: model");
    logger.info(model);
    logger.info("-->Salesforce Connector [debug]: data");
    logger.info(JSON.stringify(data));
    logger.info("-->Salesforce Connector [debug]: callback");
    logger.info(callback.toString());
  }
  if(self.debug){
    logger.info("-->Salesforce Connector [debug]: Create new " + model);

  }
  var sObjectName = this.getsObjectName(model);
if (!this.dataSource.connected) {
        logger.info({"message":"datasource not connected ,its connecting"});
		return this.dataSource.once('connected', function () {
		self.sfconn.sobject(sObjectName).create(data, function(err, ret) {
		if (err || !ret.success) { 
		     var message = {"message":"Salesforce Connector error"};
			 var obj = {"message":"Exception occured while execution","error":err};
            logger.error(message,obj);
			callback(err, ret);
		}else{
			 var message = {"message":"Salesforce Connector: Created Successfully"};
			 var obj = {"ret.id":ret.id};
            logger.info(message,obj);
			callback(null, ret);
		}
		});
		}.bind(this));
	}
	else{
	logger.info({"message":"datasource already connected"});
		self.sfconn.sobject(sObjectName).create(data, function(err, ret) {
		if (err || !ret.success) { 
		 var message = {"message":"Salesforce Connector error"};
			 var obj = {"message":"Exception occured while execution","error":err};
            logger.error(message,obj);
			callback(err, ret);
		}else{
			var message = {"message":"Salesforce Connector: Created Successfully"};
			 var obj = {"ret.id":ret.id};
            logger.info(message,obj);
			callback(null, ret);
		}
		});
	
	}
	var message = {"message":"Salesforce Connector create method exit"};
    logger.info(message);
}

/**
 * Update properties for the model instance data (update - put)
 * @param {String} model The model name
 * @param {*} id The id value
 * @param {Object} data The model data
 * @param {Function} [callback] The callback function
 */
SFConnector.prototype.updateAttributes = function updateAttrs(model, id, data, callback) {
  var self = this;
  	var message = {"message":"Salesforce Connector updateAttributes method entry"};
    logger.info(message);
 if(self.debug){
    logger.info("-->Salesforce Connector [debug]: model");
    logger.info(model);
	logger.info("-->Salesforce Connector [debug]: id");
    logger.info(id);
    logger.info("-->Salesforce Connector [debug]: data");
    logger.info(data);
    logger.info("-->Salesforce Connector [debug]: callback");
    logger.info(callback.toString());
  }
  //updating the data with the id
  var sObjectName = this.getsObjectName(model);
  data.Id = id;
 if (!this.dataSource.connected) {
		logger.info({"message":"datasource not connected ,its connecting"});
		return this.dataSource.once('connected', function () {
		self.sfconn.sobject(sObjectName).update(data, function(err, ret) {
		if (err || !ret.success) { 
		    var message = {"message":"Salesforce Connector error"};
			 var obj = {"message":"Exception occured while  execution","error":err};
            logger.error(message,obj);
			callback(err, ret); 
		}else{
			 var message = {"message":"Salesforce Connector Updated info"};
			 var obj = {"message":"Salesforce Connector : Updated Successfully","ret.id":ret.id};
            logger.info(message,obj);
			callback(null, ret);
		}
		});
		}.bind(this));
	}
	else{
		logger.info({"message":"datasource already connected"});
		 self.sfconn.sobject(sObjectName).update(data, function(err, ret) {
		if (err || !ret.success) { 
		    var message = {"message":"Salesforce Connector error"};
			 var obj = {"message":"Exception occured while  execution","error":err};
            logger.error(message,obj);
			callback(err, ret); 
    }else{
	 var message = {"message":"Salesforce Connector Updated info"};
	 var obj = {"message":"Salesforce Connector : Updated Successfully","ret.id":ret.id};
      logger.info(message,obj);
      callback(null, ret);
    }
  });
	var message = {"message":"Salesforce Connector updateAttributes method exit"};
      logger.info(message);
	} 
}

/**
 * Count the number of instances for the given model
 *
 * @param {String} model The model name
 * @param {Function} [callback] The callback function
 * @param {Object} filter The filter for where
 *
 */
SFConnector.prototype.count = function count(model, callback, where) {
  var self = this;
  var message = {"message":"Salesforce Connector count method entry"};
    logger.info(message);

  if(self.debug){
    logger.info("-->Salesforce Connector [debug]: model");
    logger.info(model);
    logger.info("-->Salesforce Connector [debug]: where");
    logger.info(where);
    logger.info("-->Salesforce Connector [debug]: callback");
    logger.info(callback.toString());
  }
  var sObjectName = this.getsObjectName(model);
if (!this.dataSource.connected) {
     logger.info({"message":"datasource not connected ,its connecting"});
		return this.dataSource.once('connected', function () {
		  self.sfconn.sobject(sObjectName)
			.select("*")
			.where(where)
			.execute(function(err, records) {
				if (err) { 
				  var message = {"message":"Salesforce Connector error"};
			 var obj = {"message":"Exception occured while execution","error":err};
            logger.error(message,obj);
					callback(err,err);
				}else{
					 var message = {"message":"Salesforce Connector Count info"};
					var obj = {"message":"Salesforce Connector : Count Successful","records.length":records.length};
					logger.info(message,obj);

					callback(null, records.length)
    }
  });
		}.bind(this));
	}
	else{
	      logger.info({"message":"datasource already connected"});
		  self.sfconn.sobject(sObjectName)
			.select("*")
			.where(where)
			.execute(function(err, records) {
				if (err) { 
					var message = {"message":"Salesforce Connector error"};
					var obj = {"message":"Exception occured while execution","error":err};
					logger.error(message,obj);

					callback(err,err);
				}else{
					var message = {"message":"Salesforce Connector Count info"};
					var obj = {"message":"Salesforce Connector : Count Successful","records.length":records.length};
					logger.info(message,obj);

					callback(null, records.length)
    }
  });
	
	}
	var message = {"message":"Salesforce Connector count method exit"};
	logger.info(message);

}

/**
 * Delete all instances for the given model - (delete - delete)
 * @param {String} model The model name
 * @param {Object} filter The filter for where
 * @param {Function} [callback] The callback function
 */
SFConnector.prototype.destroyAll = function destroyAll(model, where, callback) {
  var self = this;
	var message = {"message":"Salesforce Connector destroyAll method entry"};
	logger.info(message);

   if(self.debug){
    logger.info("-->Salesforce Connector [debug]: model");
    logger.info(model);
    logger.info("-->Salesforce Connector [debug]: where");
    logger.info(where);
    logger.info("-->Salesforce Connector [debug]: callback");
    logger.info(callback.toString());
  }

  var sObjectName = this.getsObjectName(model);
  var listOfIds = [];
  for (var key in where) {
	   var message = {"message":"Salesforce Connector destroyAll info"};
		var obj = {"message":"Salesforce Connector key","key":key,"where[key]":where[key]};
		logger.info(message,obj);

      listOfIds.push(where[key]);
  }

  // Multiple records deletion
if (!this.dataSource.connected) {
        logger.info({"message":"datasource not connected ,its connecting"});
		return this.dataSource.once('connected', function () {
		self.sfconn.sobject(sObjectName).destroy(listOfIds, function(err, rets) {
		if (err) { 
			var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"Exception occured while execution","error":err};
			logger.error(message,obj);

			callback(err,err);
		}else{
			logger.info({"message":"Salesforce Connector Delete info"},{"rets":rets});
			for (var i=0; i < rets.length; i++) {

				if (rets[i].success) {
				var message = {"message":"Salesforce Connector destroyAll result"};
				var obj = {"message":"Salesforce Connector delete info","rets[i].id":rets[i].id};
				logger.info(message,obj);

				 
			}
		}
		var count = rets.length;

		callback(null, count);
    }
  });
		}.bind(this));
	}
	else{
	  logger.info({"message":"datasource already connected"});
	  
	  self.sfconn.sobject(sObjectName).destroy(listOfIds, function(err, rets) {
		if (err) { 
		
		var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"Exception occured while execution","error":err};
			logger.error(message,obj);

			callback(err,err);
		}else{
            logger.info({"message":"Salesforce Connector Delete info"},{"rets":rets});
			for (var i=0; i < rets.length; i++) {

			if (rets[i].success) {
			var message = {"message":"Salesforce Connector destroyAll result"};
				var obj = {"message":"Salesforce Connector Delete info","rets[i].id":rets[i].id};
				logger.info(message,obj);
				

			}
		}
		var count = rets.length;

		callback(null, count);
		}
  });
	
	}
	var message = {"message":"Salesforce Connector destroyAll method exit"};
	logger.info(message);

}

/**
 * Update if the model instance exists with the same id or create a new instance
 *
 * @param {String} model The model name
 * @param {Object} data The model instance data
 * @param {Function} [callback] The callback function
 */
SFConnector.prototype.updateOrCreate = function updateOrCreate(model, data, callback) {
  var self = this;
  var message = {"message":"Salesforce Connector updateOrCreate method entry"};
	logger.info(message);

 if(self.debug){
    logger.info("-->Salesforce Connector [debug]: model");
    logger.info(model);
    logger.info("-->Salesforce Connector [debug]: data");
    logger.info(data);
    logger.info("-->Salesforce Connector [debug]: callback");
    logger.info(callback.toString());
  }
  var sObjectName = this.getsObjectName(model);   
if (!this.dataSource.connected) {
        logger.info({"message":"datasource not connected ,its connecting"});
		return this.dataSource.once('connected', function () {
		self.sfconn.sobject(sObjectName).update(data, function(err, ret) {
		if (err || !ret.success) { 
		    var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"This method is not supported. Use update(upsert) with Where Clause","error":err};
			logger.error(message,obj);

			callback(err, ret);
		}else{
			var message = {"message":"Salesforce Connector update record successful"};
			var obj = {"message":"Salesforce Connector update record id","ret.id":ret.id};
			logger.info(message,obj);

			callback(null, ret);
		}
	});
		}.bind(this));
	}
	else{
	    logger.info({"message":"datasource already connected"});
	    self.sfconn.sobject(sObjectName).update(data, function(err, ret) {
		if (err || !ret.success) { 
		var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"This method is not supported. Use update(upsert) with Where Clause","error":err};
			logger.error(message,obj);

			callback(err, ret);
		}else{
			var message = {"message":"Salesforce Connector update record successful"};
			var obj = {"message":"Salesforce Connector update record id","ret.id":ret.id};
			logger.info(message,obj);

			callback(null, ret);
		}
	});
	
	}
	var message = {"message":"Salesforce Connector updateOrCreate method exit"};
			logger.info(message);

}





/**
 * Delete a model instance by id
 *
 * @param {String} model The model name
 * @param {*} id The id value
 * @param {Function} [callback] The callback function
 */
SFConnector.prototype.destroy = function destroy(model, id, callback) {
  var self = this;
  	var message = {"message":"Salesforce Connector destroy method entry"};
	logger.info(message);

 if(self.debug){
    logger.info("-->Salesforce Connector [debug]: model");
    logger.info(model);
    logger.info("-->Salesforce Connector [debug]: id");
   logger.info(id);
    logger.info("-->Salesforce Connector [debug]: callback");
    logger.info(callback.toString());
  }
  var sObjectName = this.getsObjectName(model);
if (!this.dataSource.connected) {
        logger.info({"message":"datasource not connected ,its connecting"});
		return this.dataSource.once('connected', function () {
		self.sfconn.sobject(sObjectName).destroy(id.Id, function(err, ret) {
		//callback && callback(err, ret && ret.ops);
		if (err || !ret.success) { 
		var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"Exception occured while execution","error":err};
			logger.error(message,obj);

			callback(err, ret);
		}else{
			var message = {"message":"Salesforce Connector destroy method successful"};
			var obj = {"message":"Salesforce Connector destroy record id","id":ret.id};
			logger.info(message,obj);

			callback(null, ret);
		}
	});
		}.bind(this));
	}
	else{
	     logger.info({"message":"datasource already connected"});
	     self.sfconn.sobject(sObjectName).destroy(id.Id, function(err, ret) {
			//callback && callback(err, ret && ret.ops);
			if (err || !ret.success) { 
			var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"Exception occured while execution","error":err};
			logger.error(message,obj);

				callback(err, ret);
			}else{
			var message = {"message":"Salesforce Connector destroy method successful"};
			var obj = {"message":"Salesforce Connector destroy record id","id":ret.id};
			logger.info(message,obj);

			callback(null, ret);
			}
		});
	
	}
	var message = {"message":"Salesforce Connector destroy method exit"};
	logger.info(message);

}

/**
 * Update properties for the model instance data (update - put) with where clause
 * @param {String} model The model name
 * @param {*} id The id value
 * @param {Object} data The model data
 * @param {Function} [callback] The callback function
 */
SFConnector.prototype.updateAll = function update(model,where,data,callback) {
  var self = this;
  var message = {"message":"Salesforce Connector update(updateWithWhereClause) method entry"};
	logger.info(message);

 if(self.debug){
    logger.info("-->Salesforce Connector [debug]: model");
    logger.info(model);
    logger.info("-->Salesforce Connector [debug]: where");
   logger.info(where);
    logger.info("-->Salesforce Connector [debug]: data");
    logger.info(data); 
	logger.info("-->Salesforce Connector [debug]: callback");
    logger.info(callback.toString());
  }
  
    var sObjectName = this.getsObjectName(model);

	 for (var key in where) {
        extIdField = key;
	    data[key] = where[key];
		var message = {"message":"Salesforce Connector update info"};
        var obj = {"message":"Salesforce Connector Info","External Id Field Name":key,"Value":where[key],"data":data};
		logger.info(message,obj);
    }


 if (!this.dataSource.connected) {
        logger.info({"message":"datasource not connected ,its connecting"});
		return this.dataSource.once('connected', function () {
		self.sfconn.sobject(sObjectName).upsert(data,extIdField, function(err, ret) {
		if (err || !ret.success) { 
		var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"Exception occured while execution","error":err};
			logger.error(message,obj);
		
			callback(err, ret); 
		}else{
			var message = {"message":"Salesforce Connector  update(updateWithWhereClause) Successful"};
			logger.info(message);

			callback(null, ret);
		}
		});
		}.bind(this));
	}
	else{
	     logger.info({"message":"datasource already connected"});
		 self.sfconn.sobject(sObjectName).upsert(data,extIdField,function(err, ret) {
		if (err || !ret.success) { 
		var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"Exception occured while execution","error":err};
			logger.error(message,obj);
	
			callback(err, ret); 
    }else{
	 var message = {"message":"Salesforce Connector  update(updateWithWhereClause) Successful"};
			logger.info(message);

      callback(null, ret);
    }
  });
	
	}
	 var message = {"message":"Salesforce Connector update(updateWithWhereClause) method exit"};
			logger.info(message);

	};
	
SFConnector.prototype.update = function update(model,where,data,callback) {
  var self = this;
  var message = {"message":"Salesforce Connector update(updateWithWhereClause) method entry"};
	logger.info(message);

 if(self.debug){
    logger.info("-->Salesforce Connector [debug]: model");
    logger.info(model);
    logger.info("-->Salesforce Connector [debug]: where");
   logger.info(where);
    logger.info("-->Salesforce Connector [debug]: data");
    logger.info(data); 
	logger.info("-->Salesforce Connector [debug]: callback");
    logger.info(callback.toString());
  }
  
    var sObjectName = this.getsObjectName(model);

	 for (var key in where) {
        extIdField = key;
	    data[key] = where[key];
		var message = {"message":"Salesforce Connector update info"};
		var obj = {"message":"Salesforce Connector Info","External Id Field Name":key,"Value":where[key],"data":data};
		logger.info(message,obj);
		
    }


 if (!this.dataSource.connected) {
        logger.info({"message":"datasource not connected ,its connecting"});
		return this.dataSource.once('connected', function () {
		self.sfconn.sobject(sObjectName).upsert(data,extIdField, function(err, ret) {
		if (err || !ret.success) { 
		var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"Exception occured while execution","error":err};
			logger.error(message,obj);
		
			callback(err, ret); 
		}else{
			var message = {"message":"Salesforce Connector  update(updateWithWhereClause) Successful"};
			logger.info(message);
			callback(null, ret);
		}
		});
		}.bind(this));
	}
	else{
	     logger.info({"message":"datasource already connected"});
		 self.sfconn.sobject(sObjectName).upsert(data,extIdField,function(err, ret) {
		if (err || !ret.success) { 
		var message = {"message":"Salesforce Connector error"};
			var obj = {"message":"Exception occured while execution","error":err};
			logger.error(message,obj);
	
			callback(err, ret); 
    }else{
	 var message = {"message":"Salesforce Connector  update(updateWithWhereClause) Successful"};
			logger.info(message);

      callback(null, ret);
    }
  });
	
	}
	 var message = {"message":"Salesforce Connector update(updateWithWhereClause) method exit"};
			logger.info(message);

	};
	

/**
 * Builds the JSON object for the Where Filter
 *
 * @param {String} model The model name
 * @param {Object} filter The filter for where
 */
SFConnector.prototype.buildWhere = function (model, where){

}

SFConnector.prototype.getsObjectName = function (model){
	var modelObject = this._models[model];
	var sObjectName;
	if(modelObject && modelObject.settings && modelObject.settings.sObjectName){
		sObjectName = modelObject.settings.sObjectName;
	}else{
		sObjectName = model;
	}
	return sObjectName;
}


/**
 * Update instances
 * @param {String} model The model name
 * @param {*} id The id value
 * @param {Object} data The model instance data
 * @callback {Function} cb Callback function
 *
SFConnector.prototype.update = function (model, id, data, callback) {
  var self = this;
  console.log("-->Salesforce Connector: update");
  if(self.debug){
    console.log("-->Salesforce Connector [debug]: model");
    console.log(model);
    console.log("-->Salesforce Connector [debug]: id");
    console.log(id);
    console.log("-->Salesforce Connector [debug]: data");
    console.log(data);
    console.log("-->Salesforce Connector [debug]: callback");
    console.log(callback.toString());
  }
  callback(null, {});
}
*/

/**
 * Find a model instance by id
 *
 * @param {String} model The model name
 * @param {*} id The id value
 * @param {Function} [callback] The callback function
 *
SFConnector.prototype.find = function find(model, id, callback) {
  var self = this;
  console.log("-->Salesforce Connector: find");
  if(self.debug){
    console.log("-->Salesforce Connector [debug]: model");
    console.log(model);
    console.log("-->Salesforce Connector [debug]: id");
    console.log(id);
    console.log("-->Salesforce Connector [debug]: callback");
    console.log(callback.toString());
  }
  callback(null, {});
};
/*

/**
 * Check if a model instance exists by id
 *
 * @param {String} model The model name
 * @param {*} id The id value
 * @param {Function} [callback] The callback function
 *
SFConnector.prototype.exists = function (model, id, callback) {
  var self = this;
  console.log("-->Salesforce Connector: exists");
  if(self.debug){
    console.log("-->Salesforce Connector [debug]: model");
    console.log(model);
    console.log("-->Salesforce Connector [debug]: id");
    console.log(id);
    console.log("-->Salesforce Connector [debug]: callback");
    console.log(callback.toString());
  }
  callback(null, {});
};
*/

/**
 * Save a model instance
 *
 * @param {String} model The model name
 * @param {Object} data The model instance data
 * @param {Function} [callback] The callback function
 *
SFConnector.prototype.save = function (model, data, callback) {
  var self = this;
  console.log("-->Salesforce Connector: exists");
  if(self.debug){
    console.log("-->Salesforce Connector [debug]: model");
    console.log(model);
    console.log("-->Salesforce Connector [debug]: data");
    console.log(id);
    console.log("-->Salesforce Connector [debug]: callback");
    console.log(callback.toString());
  }
  callback(null, {});
};
*/

SFConnector.prototype.ping = function(cb) {
	var self = this;
	this.connect(function(err){
		if (err) {
			logger.error({"message":"Salesforce Connector error"},{"message":"Exception occured while getting the connection","error":err});
			console.error({"message":"Salesforce Connector error"},{"message":"Exception occured while getting the connection","error":err});
		}else{
			self.logout();
		}
		cb(err);
	}); 
};
require('./discovery')(SFConnector);
