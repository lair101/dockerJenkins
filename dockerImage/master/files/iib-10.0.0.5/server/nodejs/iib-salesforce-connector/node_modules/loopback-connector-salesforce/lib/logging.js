/* 
 * Licensed Materials - Property of IBM
 *
 * (C) Copyright IBM Corp. 2016 All Rights Reserved
 * 
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 */    

//var config     = require ('config').Service,

var log4js = require('log4js');
//Commented below line as we no longer use ELKLogger after CnC 
//require( "./elk_logger/nodejs/ElkLogger.js" ).extendLogger(log4js,"connect_compose","us_stag");



function initializeLogging(configureLog4js) {
      
	if(configureLog4js==true ||   typeof configureLog4js==undefined || configureLog4js == null ){
	  
	  console.log("configuring logjs again");
	   log4js.configure({
			//"replaceConsole" : false,
			appenders: [
				/*{
				"host": "158.85.214.76",       
				"port": 10001,                
				"type": "logstashJSON",
				"logType":"connect_compose",         
				"layout": {
					"type": "pattern",
					"pattern": "%m"
				  }
				},*/
				{
					type: "console"
				},
				{ type: 'file', filename: 'logs/SFConnector.log', category: 'SFRuntime' },
				{ type: 'file', filename: 'logs/SFConnector.log', category: 'SFDiscovery' }
			]
				
			});
			
	}
	else
		console.log('*********************NOT configuring logjs again');
	var logger = log4js.getLogger("SFRuntime"); 
	logger.setLevel(log4js.ALL);
	logger.info({"message":"Setting up logging for SF connector"});

	return logger;	
}

/**
 * This is a proxy for the log4js `getLogger()` method.
 * All modules requiring a logger should make the request through this proxy
 * so that we can track all of the loggers being used across the application.
 * This makes it much easier to change logging levels on the fly without an
 * application restart.
 * @param String name of the logger to be used
 */
function getLogger(name) {
    logger = log4js.getLogger(name);
    logger.setLevel('INFO');
    
    return logger;
}

module.exports = {
        initializeLogging : initializeLogging,
        init : initializeLogging,
        getLogger : getLogger
		
};

 
 