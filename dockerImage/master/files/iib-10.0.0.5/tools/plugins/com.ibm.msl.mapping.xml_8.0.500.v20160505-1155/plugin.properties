# NLS_ENCODING=UNICODE
#
###############################################################################
#  Licensed Materials - Property of IBM
# (C) Copyright IBM Corp.  2001, 2010 - All Rights Reserved.
# US Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
###############################################################################
# NLS_MESSAGEFORMAT_NONE
pluginName = XML Mapping and XML Schema Extensions
providerName = IBM

resourceProviders = Resource Providers
transformEngines = Transform Engines
mappingResourceSet = Mapping Resource Set
mappingResourceSetInitializer = Mapping Resource Set Initializer


MappingNatureName        = Mapping Nature
MappingBuilderName       = Mapping Builder

# START NON-TRANSLATABLE 
# AKR - US55036 - Refinement labels are re-used as-is from base
#MoveRefinementLabel      = Move
#ConcatFunctionLabel      = Concat
#SubstringFunctionLabel   = Substring
#NormalizeFunctionLabel   = Normalize
#AssignFunctionLabel      = Assign
#InlineRefinementLabel    = Inline map
#SubmapRefinementLabel    = Submap
#GroupRefinementLabel     = Group
#ConvertRefinementLabel   = Convert
#CustomRefinementLabel    = Custom
#CustomXPathRefinementLabel = Custom XPath
#CustomXSLTRefinementLabel = Custom XSLT
#CustomJavaRefinementLabel = Custom Java
#ConditionRefinementLabel = Condition
#ElseRefinementLabel      = Else
#SortRefinementLabel      = Sort
#LocalRefinementLabel	 = Local map
#ForEachRefinementLabel	 = For each
#JoinRefinementLabel	 	 = Join
#AppendRefinementLabel	 = Append
#LookupRefinementLabel    = Lookup
#CreateRefinementLabel    = Create
#PolicyRefinementLabel	 = Policy
# END NON-TRANSLATABLE

# AKR - US55036 - Category labels come from base
#categoryCore = Core Transforms
#categoryString = String Functions
#categoryMath = Math Functions
#categoryBoolean = Boolean Functions
#categoryExsltDateTime = Date and Time Functions
#categoryCustom = Custom Transforms
#categoryXPath = XPath Functions
#categoryExsltString = String Functions
#categoryExsltMath = Math Functions

# AKR - US55036 - Refinement descriptions are re-used as-is from base
#MoveRefinementDescription = Copies data from the input element to the output element.
#ConcatRefinementDescription = Concatenates the input elements into the output element.
#SubstringRefinementDescription = Takes a delimited string as input and sets the output to be the substring of a given delimiter and index.
#NormalizeRefinementDescription = Normalizes the whitespace of the input element.
#AssignRefinementDescription = Sets a hard coded value in the output element. There is no input element.
#SubmapRefinementDescription = References another map which can be stored in a project. Choosing this transform type is most effective for reuse purposes.
#GroupRefinementDescription = Takes a single list and creates a number of lists. It is used to map a "flat" repeatable structure (an array) to a nested repeatable structure (a nested array) based on criteria from the input structure.
#ConvertRefinementDescription = Converts the source type into the target type.
#CustomXPathRefinementDescription = Allows you to enter your own XPath expressions in the property pages to be used in the transform.
#CustomXSLTRefinementDescription = Allows you to enter your own XSLT templates in the property pages to be used in the transform.
#CustomJavaRefinementDescription = Allows you to enter your own Java code in the property pages to be used in the transform.
#IfRefinementDescription = A conditional transform which is a container for nested transforms.  Nested transforms will run based on the given condition of this transform.
#LocalRefinementDescription = Has only one element as input (either a simple type or complex type) that can contain nested maps. The target can be either a single element or an array element but must be a complex type. The elements in the nested map must be mapped in order for the transform to execute.
#ForEachRefinementDescription = Iterates over one input array element (either a simple type or a complex type). The output element must be an array of complex types.  This transform type contains a nested map and the elements in the nested map must be mapped in order for the transform to execute.
#JoinRefinementDescription = Joins elements from two or more input arrays. The target element can be an array or single element. Input arrays need not be the same size during execution.
#AppendRefinementDescription = Iterates over multiple inputs in the order specified to append data. This transform takes multiple inputs of either simple type or complex type that can contain nested transforms. The output must be an array of either a simple type or a complex type.
#LookupRefinementDescription = Look up a static relationship to convert the data of a simple element. The transform takes a single input element and a single output element. Both input and output elements must be simple XSD type elements.
#CreateRefinementDescription = Create a target element for the complex target without the use of any input data.  This can be used to create empty or nil elements.


XMLMapProblemMarker      = Map Marker

##############################################
# US55035 - Generate BO Map
##############################################
#DATA_MAP_ENGINES_XSLT_LABEL       = XSLT Version 1.0
#DATA_MAP_ENGINES_XSLT2_LABEL      = XSLT Version 2.0
#DATA_MAP_ENGINES_XQUERY_LABEL     = XQuery Version 1.0
