<%@ jet skeleton="skeleton/SQLJFileSkeleton.skel" class="SQLJTemplate" startTag="<$" endTag="$>"%>
<$
// This template generates a class that caches the result set 
if(beanData.getJavaPackageName() != null){
$>
package <$=beanData.getJavaPackageName()$>;
<$
}
$>
/**************************************************************
 *Description - SQLJ File
 * 
 * A bean that will execute an SQL statement using SQLJ 
 */
 
// Imports 

   import java.sql.Connection;
   <$
   if(beanData.isUseDriverManager())
   {
   $>
   import java.sql.DriverManager;
   <$
   }
   else{
   $>
   import javax.naming.Context;
   import javax.naming.InitialContext;
   import javax.sql.DataSource;
   <$
   }
   $>
   import java.sql.SQLException;

public class <$=beanData.getClassName()$> {

   //Variables
   protected String username = null;
   protected String password = null;
   <$
   if(beanData.isUseDriverManager())
   {
   $>
   protected String driverName = "<$=beanData.getDriverName()$>";
   protected String url = "<$=beanData.getURL().replace("\\", "\\\\")$>";
   <$
   }
   else{
   $>
   protected String dataSourceName = "<$=beanData.getDataSourceName()$>";
   <$
   }
   $>
   protected Connection con = null;
   protected UserContext ctx;
   
   // Declare a user context class.
   #sql public static context UserContext;
     
   <$
   String itrDefinition = "";
   ISQLFieldInfo[] columns = beanData.getColumnInfo();
      for(int i = 0; i < columns.length; i++){
			int colType = columns[i].getType(); 
			String javaType = beanData.getJavaTypeForSql(colType);	
			itrDefinition = itrDefinition+javaType+", "; 
   $>
   <$
   }
   itrDefinition = itrDefinition.substring(0,itrDefinition.length()-2); 
   $>
   // Declare an iterator
   #sql iterator Cursor1 (<$=itrDefinition$> );
   Cursor1 cursor1 = null;
  
   public boolean establishConnection() throws Exception {
		if (con == null || con.isClosed()) {
			// Code to get connection
	<$
	if(beanData.isUseDriverManager())
	  {
	$>
			Class.forName(getDriverName()).newInstance();
			if (username == null) {
				con = DriverManager.getConnection(url);
			} else {
				con = DriverManager.getConnection(url, username, password);
			}

			ctx = new UserContext(con);
	<$
	}
	else {
	$>
	     Context initCtx = new InitialContext();
		 DataSource ds = (DataSource) initCtx.lookup(dataSourceName);
		 if (username == null) {
			con = ds.getConnection();
		 } else {
			con = ds.getConnection(username, password);
		 }
	 	 
	 	 ctx = new UserContext(con);
	 <$
	 }
	 $>
		}
		return true;
	}
 
   /*****************************************************************
    * Execute the database query
    */
    <$
     // Determine parameters for execute method
     String execParms = "";
     StringBuffer buffer = new StringBuffer();
  
  	 if (beanData.getAuthenticationStyle()
			== IBeanData.AUTHENTICATION_BY_CALLER) {
		 buffer.append("String username, String password, ");
	 }
  
	 String parmName;
	 ISQLFieldInfo[] parmInfo = beanData.getParmInfo();
	
	 for (int i = 0; i < parmInfo.length; i++) {
	    
		parmName = parmInfo[i].getName();
		buffer
			.append(" ")
			.append(
				beanData.getJavaTypeForSql(
					parmInfo[i].getType()))
			.append(" ")
			.append(parmName)
			.append(", ");
	
	 }
	 execParms = buffer.toString();
	 if (execParms.length() >0)
		 execParms = execParms.substring(0,execParms.length()-2); 
	 $>		
   public void execute(<$=execParms$> ) throws Exception {
   		// Establish Connection
   		<$
   		 if (beanData.getAuthenticationStyle()
			== IBeanData.AUTHENTICATION_BY_CALLER) {
		$>
		this.username = username;
		this.password = password;
		<$
		} else {
		$>
		this.username = "<$=beanData.getUserName()$>";
		this.password = "<$=beanData.getPassword()$>";
		<$
		} 
		$>
		establishConnection();
		
		// Execute the SQL Statement
		System.out.println("Retrieve some data from the database.");
		#sql [ctx] cursor1 = {<$=beanData.getSQLStatementString()$>};
		
	
   }
 
  /**************************************************************
   *Moves to the next row of the result set if it exsits
   *@return true if there is another row of data
   */
	public boolean next() throws SQLException {
		return cursor1.next();
	}
  
   /*************************************************************
    * Closes Result Set
    */
   public void close() throws  SQLException {
     //	makes all changes made since the previous commit/rollback permanent
	 // and releases any database locks currrently held by the Connection.
	 con.commit();

	 // releases a Connection's database and JDBC resources immediately
	 if( ctx != null )
	 {
	   ctx.close();
	 }
	 else
	 {
	   con.close();
	 }

   }

  
        
   //Setters
  
   /**************************************************************
    * Set the database username
    */
   public void setUsername(String username){
      this.username = username;
   }
   
   /**************************************************************
    * Set the database password
    */
   public void setPassword(String password){
      this.password = password;
   }
   
   <$
   if(beanData.isUseDriverManager())
   {
   $>
   /**************************************************************
    * Set the database driver name
    */
   public void setDriverName(String driverName){
      this.driverName = driverName;
   }
   
   /**************************************************************
    * Set the database url
    */
   public void setUrl(String url){
      this.url = url;
   }
   <$
   }
   else{
   $>
   /**************************************************************
    * Set the database data source name
    */
   public void setDataSourceName(String dataSourceName){
      this.dataSourceName = dataSourceName;
   }
   <$
   }
   $>

   //Getters
  

   <$
   String[] colMethNames = beanData.getColMethodsNames();
   for(int i = 0; i < colMethNames.length; i++){
      String colName = colMethNames[i];
      int colType = columns[i].getType(); 
	  String javaType = beanData.getJavaTypeForSql(colType);	
   $>
   /**************************************************************
    * Get <$=colName$>
    * @return return column <$=colName$>
    */
   public <$=javaType$> get<$=colName$>() throws  SQLException {
    return cursor1.getCol<$=i+1$>();
   }
   <$
   }

   $>
   /**************************************************************
    * Get the database username
    * @return String database username
    */
   public String getUsername(){
      return username;
   }
 
   <$
   if(beanData.isUseDriverManager())
   {
   $>
   /**************************************************************
    * Get the database driver name
    * @return String database driver manager name
    */
   public String getDriverName(){
      return driverName;
   }
   
   /**************************************************************
    * Get the database url
    * @return String database url
    */
   public String getUrl(){
      return url;
   }
   <$ 
   }
   else{
   $>
   /**************************************************************
    * Get the database data source name
    * @return String database data source name
    */
   public String getDataSourceName(){
      return dataSourceName;
   }
   <$
   }
   $>
}
