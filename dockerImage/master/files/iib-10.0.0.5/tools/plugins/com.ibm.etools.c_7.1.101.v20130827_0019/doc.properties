# NLS_MESSAGEFORMAT_VAR 

# C Preference Page
pccp0010_0 =\
C Preference Page \n\n\
Properties that describe the data encoding \
characteristics of the C source data structure.

# Compiler
pccp0020_0 =\
Compiler \n\n\
The type of compiler used to compile your program \
The values are: Unspecified, Msvc for Microsoft \
Visual C++, gcc for GNU C Compiler and xlc for AIX.

# Compiler Flags
pccp0030_0 =\
Compile Flags \n\n\
The compile flags such as /Gh-, /Gh+, /O+ that \
are used to control the compiler behavior.

# Codepage
pccp0040_0 =\
Codepage \n\n\
The Codepage of the target C program. The default codepage is set to \
8859_1, to conform to most browsers. The list of valid codepage strings can \
be found in the JDK Internationalization Specification.

# Floating Point Format
pccp0050_0 =\
Floating Point Format \n\n\
The floating point format (IBM or IEEE). When the byte \
representation of floating point numbers is as defined in IBM System/390 \
Priniciples of Operation this is referred to as an IBM 390 Hexadecimal \
floating point format. When the byte representation of floating point \
numbers is as defined by IEEE standard 754, this is referred to as an IEEE \
Non-Extended floating point format.

# String Encoding1
pccp0060_0 =\
String Encoding \n\n\
This property determines the format in which strings are encoded. The \
default value of NULL padded, respresents strings as character arrays, with \
the end of the string being terminated with the null character. The value \
of SPACE padded represents strings as character arrays, with the end of the \
string being padded out with spaces to the maximum length of the string. \
This setting is especially useful for a C program running inside a CICS \
region.

# String Encoding2
pccp0070_0 =\
String Encoding \n\n\
This property determines the format in which strings are encoded. The \
default value of NULL padded, respresents strings as character arrays, with \
the end of the string being terminated with the null character. The value \
of SPACE padded represents strings as character arrays, with the end of the \
string being padded out with spaces to the maximum length of the string. \
This setting is especially useful for a C program running inside a CICS \
region.

# Include Path
pccp0080_0 =\
Include Path \n\n\
The list of directories to search for include files. 

# Address Size1
pccp0090_0 =\
Address Size \n\n\
The platform address size of 32 bits, or 64 bits.

# Address Size2
pccp0100_0 =\
Address Size \n\n\
The platform address size of 32 bits, or 64 bits.

# Size of Long Double1
pccp0110_0 =\
Size of Long Double \n\n\
The storage size of a long double precision \
floating point value. It can be 64 or 128 bits.

# Size of Long Double2
pccp0120_0 =\
Size of Long Double \n\n\
The storage size of a long double precision \
floating point value. It can be 64 or 128 bits.

# Byte Order1
pccp0130_0 =\
Byte Order \n\n\
The byte representation of integers ordered from \
the most significant byte to the least significant byte, is referred to as \
a big endian representation. The byte representation of integers ordered \
from the least significant byte to most significant byte, is referred to as \
a little endian representation.

# Byte Order2
pccp0140_0 =\
Byte Order \n\n\
The byte representation of integers ordered from \
the most significant byte to the least significant byte, is referred to as \
a big endian representation. The byte representation of integers ordered \
from the least significant byte to most significant byte, is referred to as \
a little endian representation.

# Alignment Rule1
pccp0150_0 =\
Alignment Rule \n\n\
Alignment rule affects the storage layout of C \
structures. Natural alignment is the mostly used rule, under which a \
structure field is aligned at its natural boundary determined by its type. \
Power alignment is used by the xlc compiler on AIX. For packed alignment, \
the number of padding bytes between fields is controlled by the pack level.

# Alignment Rule2
pccp0160_0 =\
Alignment Rule \n\n\
Alignment rule affects the storage layout of C \
structures. Natural alignment is the mostly used rule, under which a \
structure field is aligned at its natural boundary determined by its type. \
Power alignment is used by the xlc compiler on AIX. For packed alignment, \
the number of padding bytes between fields is controlled by the pack level.

# Alignment Rule3
pccp0170_0 =\
Alignment Rule \n\n\
Alignment rule affects the storage layout of C \
structures. Natural alignment is the mostly used rule, under which a \
structure field is aligned at its natural boundary determined by its type. \
Power alignment is used by the xlc compiler on AIX. For packed alignment, \
the number of padding bytes between fields is controlled by the pack level.

# Pack Level1
pccp0180_0 =\
Pack Level \n\n\
The pack level can be 1, 2, 4, 8 or 16 bytes.

# Pack Level2
pccp0190_0 =\
Pack Level \n\n\
The pack level can be 1, 2, 4, 8 or 16 bytes.

# Pack Level4
pccp0200_0 =\
Pack Level \n\n\
The pack level can be 1, 2, 4, 8 or 16 bytes.

# Pack Level8
pccp0210_0 =\
Pack Level \n\n\
The pack level can be 1, 2, 4, 8 or 16 bytes.

# Pack Level16
pccp0220_0 =\
Pack Level \n\n\
The pack level can be 1, 2, 4, 8 or 16 bytes.

# Treat Unsigned Short Arrays as Strings
pccp0230_0 =\
Treat Unsigned Short Arrays as Strings \n\n\
Some C programs running on a double byte codepage (GB18030 for instance) \
treat arrays of unsigned shorts as strings of character data.  

# Size of Enumeration Constant Compact
pccp0240_0 =\
Size of Enumeration Constant \n\n\
Some compilers will compact an enumeration constant into the smallest \
integral type that can contain all variables.  Other compilers allow \
the option of selecting the number of bytes to use for an enumeration \
constant.  

# Size of Enumeration Constant1
pccp0250_0 =\
Size of Enumeration Constant \n\n\
Some compilers will compact an enumeration constant into the smallest \
integral type that can contain all variables.  Other compilers allow \
the option of selecting the number of bytes to use for an enumeration \
constant.  

# Size of Enumeration Constant2
pccp0260_0 =\
Size of Enumeration Constant \n\n\
Some compilers will compact an enumeration constant into the smallest \
integral type that can contain all variables.  Other compilers allow \
the option of selecting the number of bytes to use for an enumeration \
constant.  

# Size of Enumeration Constant4
pccp0270_0 =\
Size of Enumeration Constant \n\n\
Some compilers will compact an enumeration constant into the smallest \
integral type that can contain all variables.  Other compilers allow \
the option of selecting the number of bytes to use for an enumeration \
constant.  
