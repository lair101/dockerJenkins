# UTF-8

BootVocabulary = true

# specific genders and plurals
@data#gender = FEMALE
@data\ universale#gender = FEMALE
@data\ semplice#gender = FEMALE
@ora#gender = FEMALE
@stringa#gender = FEMALE
@lunghezza#gender = FEMALE

@booleano#plural = booleani
@giorno\ della\ settimana#plural = giorni della settimana
@mese#plural = mesi
@numero#plural = numeri
@data\ universale#plural = date universali
@orario\ universale#plural = orari universali
@ora#plural =	ore
@anno#plural = anni
@stringa#plural =	stringhe
@carattere#plural =	caratteri
@data#plural = date 
@oggetto#plural = oggetti
@lunghezza#plural = lunghezze

# ilog.rules.brl.Boolean
ilog.rules.brl.Boolean#label = booleano
ilog.rules.brl.Boolean.FALSE#label = falso
ilog.rules.brl.Boolean.TRUE#label = vero
ilog.rules.brl.Boolean.and(ilog.rules.brl.Boolean)#sentence.operator = {this, <condizione>} \n e {0, <condizione>}
ilog.rules.brl.Boolean.and(ilog.rules.brl.Boolean)#sentence.operator.precedence = 1-1:left:11
ilog.rules.brl.Boolean.not()#sentence.operator = non è vero che {this, <condizione>}
ilog.rules.brl.Boolean.not()#sentence.operator.precedence = 0-3:right:12
ilog.rules.brl.Boolean.or(ilog.rules.brl.Boolean)#sentence.operator = {this, <condizione>} \n o {0, <condizione>}
ilog.rules.brl.Boolean.or(ilog.rules.brl.Boolean)#sentence.operator.precedence = 1-1:left:10

# ilog.rules.brl.DayOfWeek
ilog.rules.brl.DayOfWeek#label = giorno della settimana
ilog.rules.brl.DayOfWeek.Friday#label = Venerdì
ilog.rules.brl.DayOfWeek.Friday#sortIndex = 5
ilog.rules.brl.DayOfWeek.Monday#label = Lunedì
ilog.rules.brl.DayOfWeek.Monday#sortIndex = 1
ilog.rules.brl.DayOfWeek.Saturday#label = Sabato
ilog.rules.brl.DayOfWeek.Saturday#sortIndex = 6
ilog.rules.brl.DayOfWeek.Sunday#label = Domenica
ilog.rules.brl.DayOfWeek.Sunday#sortIndex = 0
ilog.rules.brl.DayOfWeek.Thursday#label = Giovedì
ilog.rules.brl.DayOfWeek.Thursday#sortIndex = 4
ilog.rules.brl.DayOfWeek.Tuesday#label = Martedì
ilog.rules.brl.DayOfWeek.Tuesday#sortIndex = 2
ilog.rules.brl.DayOfWeek.Wednesday#label = Mercoledì
ilog.rules.brl.DayOfWeek.Wednesday#sortIndex = 3
ilog.rules.brl.DayOfWeek.after(ilog.rules.brl.DayOfWeek)#sentence.navigation = {this} è dopo {0}
ilog.rules.brl.DayOfWeek.afterOrEquals(ilog.rules.brl.DayOfWeek)#sentence.navigation = {this} è uguale o dopo a {0}
ilog.rules.brl.DayOfWeek.before(ilog.rules.brl.DayOfWeek)#sentence.navigation = {this} è prima di {0}
ilog.rules.brl.DayOfWeek.beforeOrEquals(ilog.rules.brl.DayOfWeek)#sentence.navigation = {this} è prima o uguale a {0}
ilog.rules.brl.DayOfWeek.isBetweenEE(ilog.rules.brl.DayOfWeek,ilog.rules.brl.DayOfWeek)#sentence.navigation = {this} è dopo {0} e prima di {1}
ilog.rules.brl.DayOfWeek.isBetweenEI(ilog.rules.brl.DayOfWeek,ilog.rules.brl.DayOfWeek)#sentence.navigation = {this} è dopo {0} e entro {1}
ilog.rules.brl.DayOfWeek.isBetweenIE(ilog.rules.brl.DayOfWeek,ilog.rules.brl.DayOfWeek)#sentence.navigation = {this} è a partire da {0} e prima di {1}
ilog.rules.brl.DayOfWeek.isBetweenII(ilog.rules.brl.DayOfWeek,ilog.rules.brl.DayOfWeek)#sentence.navigation = {this} è a partire da {0} e entro {1}


# ilog.rules.brl.Month
ilog.rules.brl.Month#label = mese
ilog.rules.brl.Month.April#label = Aprile
ilog.rules.brl.Month.April#sortIndex = 3
ilog.rules.brl.Month.August#label = Agosto
ilog.rules.brl.Month.August#sortIndex = 7
ilog.rules.brl.Month.December#label = Dicembre
ilog.rules.brl.Month.December#sortIndex = 11
ilog.rules.brl.Month.February#label = Febbraio
ilog.rules.brl.Month.February#sortIndex = 1
ilog.rules.brl.Month.January#label = Gennaio
ilog.rules.brl.Month.January#sortIndex = 0
ilog.rules.brl.Month.July#label = Luglio
ilog.rules.brl.Month.July#sortIndex = 6
ilog.rules.brl.Month.June#label = Giugno
ilog.rules.brl.Month.June#sortIndex = 5
ilog.rules.brl.Month.March#label = Marzo
ilog.rules.brl.Month.March#sortIndex = 2
ilog.rules.brl.Month.May#label = Maggio
ilog.rules.brl.Month.May#sortIndex = 4
ilog.rules.brl.Month.November#label = Novembre
ilog.rules.brl.Month.November#sortIndex = 10
ilog.rules.brl.Month.October#label = Ottobre
ilog.rules.brl.Month.October#sortIndex = 9
ilog.rules.brl.Month.September#label = Settembre
ilog.rules.brl.Month.September#sortIndex = 8
ilog.rules.brl.Month.after(ilog.rules.brl.Month)#sentence.navigation = {this} è dopo {0}
ilog.rules.brl.Month.afterOrEquals(ilog.rules.brl.Month)#sentence.navigation = {this} è uguale o dopo a {0}
ilog.rules.brl.Month.before(ilog.rules.brl.Month)#sentence.navigation = {this} è prima {0}
ilog.rules.brl.Month.beforeOrEquals(ilog.rules.brl.Month)#sentence.navigation = {this} è prima o uguale a {0}
ilog.rules.brl.Month.isBetweenEE(ilog.rules.brl.Month,ilog.rules.brl.Month)#sentence.navigation = {this} è dopo {0} e prima {1}
ilog.rules.brl.Month.isBetweenEI(ilog.rules.brl.Month,ilog.rules.brl.Month)#sentence.navigation = {this} è dopo {0} e entro il {1}
ilog.rules.brl.Month.isBetweenIE(ilog.rules.brl.Month,ilog.rules.brl.Month)#sentence.navigation = {this} è a partire da {0} e prima {1}
ilog.rules.brl.Month.isBetweenII(ilog.rules.brl.Month,ilog.rules.brl.Month)#sentence.navigation = {this} è a partire da {0} e entro il {1}

# ilog.rules.brl.Number
ilog.rules.brl.Number#label = numero
ilog.rules.brl.Number.div(ilog.rules.brl.Number)#sentence.operator = {this} / {0}
ilog.rules.brl.Number.div(ilog.rules.brl.Number)#sentence.operator.precedence = 1-1:left:101
ilog.rules.brl.Number.doesNotEqual(ilog.rules.brl.Number)#sentence.navigation = {this} non è uguale {0}
ilog.rules.brl.Number.doesNotEqual(ilog.rules.brl.Number)#sentence.navigation.precedence = 1-3:left:30
ilog.rules.brl.Number.equals(ilog.rules.brl.Number)#sentence.navigation = {this} uguale {0}
ilog.rules.brl.Number.equals(ilog.rules.brl.Number)#sentence.navigation.precedence = 1-1:left:30
ilog.rules.brl.Number.isBetweenEE(ilog.rules.brl.Number,ilog.rules.brl.Number)#sentence.navigation = {this} è strettamente tra {0, <min>} e {1, <max>}
ilog.rules.brl.Number.isBetweenEI(ilog.rules.brl.Number,ilog.rules.brl.Number)#sentence.navigation = {this} è maggiore {0, label=<min>, PARTITIVE_ARTICLE} e al massimo {1, <max>}
ilog.rules.brl.Number.isBetweenIE(ilog.rules.brl.Number,ilog.rules.brl.Number)#sentence.navigation = {this} è almeno {0, <min>} e minore {1, label=<max>, PARTITIVE_ARTICLE}
ilog.rules.brl.Number.isBetweenII(ilog.rules.brl.Number,ilog.rules.brl.Number)#sentence.navigation = {this} è tra {0, <min>} e {1, <max>}
ilog.rules.brl.Number.isGreaterThan(ilog.rules.brl.Number)#sentence.navigation = {this} è maggiore {0, PARTITIVE_ARTICLE}
ilog.rules.brl.Number.isGreaterThanOrEquals(ilog.rules.brl.Number)#sentence.navigation = {this} è almeno {0}
ilog.rules.brl.Number.isLessThan(ilog.rules.brl.Number)#sentence.navigation = {this} è minore {0, PARTITIVE_ARTICLE}
ilog.rules.brl.Number.isLessThanOrEquals(ilog.rules.brl.Number)#sentence.navigation = {this} è al massimo {0}
ilog.rules.brl.Number.minus()#sentence.operator = - {this}
ilog.rules.brl.Number.minus()#sentence.operator.precedence = 0-0:right:102
ilog.rules.brl.Number.minus(ilog.rules.brl.Number)#sentence.operator = {this} - {0}
ilog.rules.brl.Number.minus(ilog.rules.brl.Number)#sentence.operator.precedence = 1-1:left:100
ilog.rules.brl.Number.mult(ilog.rules.brl.Number)#sentence.operator = {this} * {0}
ilog.rules.brl.Number.mult(ilog.rules.brl.Number)#sentence.operator.precedence = 1-1:left:101
ilog.rules.brl.Number.plus()#sentence.operator = + {this}
ilog.rules.brl.Number.plus()#sentence.operator.precedence = 0-0:right:102
ilog.rules.brl.Number.plus(ilog.rules.brl.Number)#sentence.operator = {this} + {0}
ilog.rules.brl.Number.plus(ilog.rules.brl.Number)#sentence.operator.precedence = 1-1:left:100

# ilog.rules.brl.SimpleDate
ilog.rules.brl.SimpleDate#label = data semplice

# ilog.rules.brl.UniversalDate
ilog.rules.brl.UniversalDate#label = data universale

# ilog.rules.brl.UniversalTime
ilog.rules.brl.UniversalTime#label = orario universale

# ilog.rules.brl.Time
ilog.rules.brl.Time#label = ora
ilog.rules.brl.Time.after(ilog.rules.brl.Time)#sentence.navigation = {this} è dopo {0}
ilog.rules.brl.Time.afterOrEquals(ilog.rules.brl.Time)#sentence.navigation = {this} è uguale o dopo alle {0}
ilog.rules.brl.Time.before(ilog.rules.brl.Time)#sentence.navigation = {this} è prima {0}
ilog.rules.brl.Time.beforeOrEquals(ilog.rules.brl.Time)#sentence.navigation = {this} è prima o uguale alle {0}
ilog.rules.brl.Time.isBetweenEE(ilog.rules.brl.Time,ilog.rules.brl.Time)#sentence.navigation = {this} è dopo le {0} e prima delle {1}
ilog.rules.brl.Time.isBetweenEI(ilog.rules.brl.Time,ilog.rules.brl.Time)#sentence.navigation = {this} è dopo le {0} e entro le {1}
ilog.rules.brl.Time.isBetweenIE(ilog.rules.brl.Time,ilog.rules.brl.Time)#sentence.navigation = {this} è a partire dalle {0} e prima delle {1}
ilog.rules.brl.Time.isBetweenII(ilog.rules.brl.Time,ilog.rules.brl.Time)#sentence.navigation = {this} è a partire dalle {0} e entro le {1}


# ilog.rules.brl.Year
ilog.rules.brl.Year#label = anno
ilog.rules.brl.Year.after(ilog.rules.brl.Year)#sentence.navigation = {this} è dopo il {0}
ilog.rules.brl.Year.afterOrEquals(ilog.rules.brl.Year)#sentence.navigation = {this} è uguale o dopo al {0}
ilog.rules.brl.Year.before(ilog.rules.brl.Year)#sentence.navigation = {this} è prima del {0}
ilog.rules.brl.Year.beforeOrEquals(ilog.rules.brl.Year)#sentence.navigation = {this} è prima o uguale a {0}
ilog.rules.brl.Year.isBetweenEE(ilog.rules.brl.Year,ilog.rules.brl.Year)#sentence.navigation = {this} è dopo il {0} e prima del {1}
ilog.rules.brl.Year.isBetweenEI(ilog.rules.brl.Year,ilog.rules.brl.Year)#sentence.navigation = {this} è dopo il {0} e entro il {1}
ilog.rules.brl.Year.isBetweenIE(ilog.rules.brl.Year,ilog.rules.brl.Year)#sentence.navigation = {this} è a partire dal {0} e prima del {1}
ilog.rules.brl.Year.isBetweenII(ilog.rules.brl.Year,ilog.rules.brl.Year)#sentence.navigation = {this} è a partire dal {0} e entro il {1}


# ilog.rules.brl.String
ilog.rules.brl.String#label = stringa
ilog.rules.brl.String.contains(ilog.rules.brl.String)#sentence.navigation = {this} contiene {0}
ilog.rules.brl.String.doesNotContain(ilog.rules.brl.String)#sentence.navigation = {this} non contiene {0}
ilog.rules.brl.String.doesNotEndWith(ilog.rules.brl.String)#sentence.navigation = {this} non finisce con {0}
ilog.rules.brl.String.doesNotStartWith(ilog.rules.brl.String)#sentence.navigation = {this} non inizia con {0}
ilog.rules.brl.String.endsWith(ilog.rules.brl.String)#sentence.navigation = {this} finisce con {0}
ilog.rules.brl.String.startsWith(ilog.rules.brl.String)#sentence.navigation = {this} inizia con {0}
ilog.rules.brl.String.isEmpty()#sentence.navigation = {this} è vuota
ilog.rules.brl.String.isNotEmpty()#sentence.navigation = {this} non è vuota
ilog.rules.brl.String.length()#sentence.navigation = {lunghezza} {this, PARTITIVE_ARTICLE}
ilog.rules.brl.String.plus(ilog.rules.brl.String)#sentence.operator = {this} + {0}
ilog.rules.brl.String.plus(ilog.rules.brl.String)#sentence.operator.precedence = 1-1:left:100
ilog.rules.brl.String.concat(ilog.rules.brl.String,ilog.rules.brl.Number)#sentence.operator = {0} + {1}
ilog.rules.brl.String.concat(ilog.rules.brl.String,ilog.rules.brl.Number)#sentence.operator.precedence = 1-1:left:100
ilog.rules.brl.String.concat(ilog.rules.brl.Number,ilog.rules.brl.String)#sentence.operator = {0} + {1}
ilog.rules.brl.String.concat(ilog.rules.brl.Number,ilog.rules.brl.String)#sentence.operator.precedence = 1-1:left:100
ilog.rules.brl.String.concat(ilog.rules.brl.String,ilog.rules.brl.Character)#sentence.operator = {0} + {1}
ilog.rules.brl.String.concat(ilog.rules.brl.String,ilog.rules.brl.Character)#sentence.operator.precedence = 1-1:left:100
ilog.rules.brl.String.concat(ilog.rules.brl.Character,ilog.rules.brl.String)#sentence.operator = {0} + {1}
ilog.rules.brl.String.concat(ilog.rules.brl.Character,ilog.rules.brl.String)#sentence.operator.precedence = 1-1:left:100
ilog.rules.brl.String.contains(ilog.rules.brl.Character)#sentence.navigation = {this} contiene {0}
ilog.rules.brl.String.doesNotContain(ilog.rules.brl.Character)#sentence.navigation = {this} non contiene {0}
ilog.rules.brl.String.doesNotEndWith(ilog.rules.brl.Character)#sentence.navigation = {this} non finisce con {0}
ilog.rules.brl.String.doesNotStartWith(ilog.rules.brl.Character)#sentence.navigation = {this} non inizia con {0}
ilog.rules.brl.String.endsWith(ilog.rules.brl.Character)#sentence.navigation = {this} finisce con {0}
ilog.rules.brl.String.startsWith(ilog.rules.brl.Character)#sentence.navigation = {this} inizia con {0}

# ilog.rules.brl.Character
ilog.rules.brl.Character#label = carattere
ilog.rules.brl.Character.doesNotEqual(ilog.rules.brl.Character)#sentence.navigation = {this} non è uguale {0}
ilog.rules.brl.Character.doesNotEqual(ilog.rules.brl.Character)#sentence.navigation.precedence = 1-3:left:30
ilog.rules.brl.Character.equals(ilog.rules.brl.Character)#sentence.navigation = {this} uguale {0}
ilog.rules.brl.Character.equals(ilog.rules.brl.Character)#sentence.navigation.precedence = 1-1:left:30

# ilog.rules.brl.Date
ilog.rules.brl.Date#label = data
ilog.rules.brl.Date.after(ilog.rules.brl.Date)#sentence.navigation = {this} è dopo {0}
ilog.rules.brl.Date.afterOrEquals(ilog.rules.brl.Date)#sentence.navigation = {this} è uguale o dopo a {0}
ilog.rules.brl.Date.before(ilog.rules.brl.Date)#sentence.navigation = {this} è prima {0}
ilog.rules.brl.Date.beforeOrEquals(ilog.rules.brl.Date)#sentence.navigation = {this} è prima o uguale a {0}
ilog.rules.brl.Date.isAtDate(ilog.rules.brl.Date)#sentence.navigation = {this} è il {0}
ilog.rules.brl.Date.isAtDayOfWeek(ilog.rules.brl.DayOfWeek)#sentence.navigation = {this} è di {0}
ilog.rules.brl.Date.isAtDayTime(ilog.rules.brl.DayOfWeek,ilog.rules.brl.Time)#sentence.navigation = {this} è di {0} alle {1}
ilog.rules.brl.Date.isAtMonth(ilog.rules.brl.Month)#sentence.navigation = {this} è a {0}
ilog.rules.brl.Date.isAtMonthYear(ilog.rules.brl.Month,ilog.rules.brl.Year)#sentence.navigation = {this} è a {0} nel {1}
ilog.rules.brl.Date.isAtTime(ilog.rules.brl.Time)#sentence.navigation = {this} è a {0}
ilog.rules.brl.Date.isAtYear(ilog.rules.brl.Year)#sentence.navigation = {this} è nel {0}
ilog.rules.brl.Date.isBetweenEE(ilog.rules.brl.Date,ilog.rules.brl.Date)#sentence.navigation = {this} è dopo il {0} e prima del {1}
ilog.rules.brl.Date.isBetweenEI(ilog.rules.brl.Date,ilog.rules.brl.Date)#sentence.navigation = {this} è dopo il {0} e entro il {1}
ilog.rules.brl.Date.isBetweenIE(ilog.rules.brl.Date,ilog.rules.brl.Date)#sentence.navigation = {this} è a partire dal {0} e prima del {1}
ilog.rules.brl.Date.isBetweenII(ilog.rules.brl.Date,ilog.rules.brl.Date)#sentence.navigation = {this} è a partire dal {0} e entro il {1}

# ilog.rules.brl.Object
ilog.rules.brl.Object#label = oggetto
ilog.rules.brl.Object.is(ilog.rules.brl.Object)#sentence.navigation = {this} è {0}
ilog.rules.brl.Object.is(ilog.rules.brl.Object)#sentence.navigation.precedence = 1-1:left:20
ilog.rules.brl.Object.isIn(ilog.rules.brl.Object[])#sentence.navigation[0] = {this} è uno tra {0}
ilog.rules.brl.Object.isIn(ilog.rules.brl.Object[])#sentence.navigation[1] = {0} contengono {this}
ilog.rules.brl.Object.isNot(ilog.rules.brl.Object)#sentence.navigation = {this} non è {0}
ilog.rules.brl.Object.isNot(ilog.rules.brl.Object)#sentence.navigation.precedence = 1-2:left:20
ilog.rules.brl.Object.isNotIn(ilog.rules.brl.Object[])#sentence.navigation[0] = {this} non è uno tra {0}
ilog.rules.brl.Object.isNotIn(ilog.rules.brl.Object[])#sentence.navigation[1] = {0} non contengono {this}
ilog.rules.brl.Object.isNull()#sentence.navigation = {this} è nullo
ilog.rules.brl.Object.isNull()#sentence.navigation.precedence = 1-2:nonassoc:21
ilog.rules.brl.Object.isNotNull()#sentence.navigation = {this} non è nullo
ilog.rules.brl.Object.isNotNull()#sentence.navigation.precedence = 1-3:nonassoc:21
ilog.rules.brl.Object.count(ilog.rules.brl.Object[])#sentence.navigation = il numero di elementi in {0}

# ilog.rules.brl.System
ilog.rules.brl.System.printMessage(string)#sentence.action = stampa {0}
ilog.rules.brl.System.printMessage(string)#documentation = Questa azione standard permette di stampare una messaggio informativo sullo standard output
ilog.rules.brl.System.emitEvent(com.ibm.rules.event.Event)#sentence.action = emettere {0}
ilog.rules.brl.System.emitEvent(com.ibm.rules.event.Event)#documentation = Questa frase di azione standard emette un evento per l'elaborazione asincrona

# ilog.rules.events.Event
com.ibm.rules.event.Event#concept.label = evento

#----------------------------------------------

ilog.rules.brl.Object.is(ilog.rules.brl.Object)#documentation = Restituisce se entrambi gli operandi sono uguali
ilog.rules.brl.Object.isIn(ilog.rules.brl.Object[])#sentence.navigation[0].documentation = Restituisce se l'argomento oggetto appartiene all'argomento raccolta
ilog.rules.brl.Object.isIn(ilog.rules.brl.Object[])#sentence.navigation[1].documentation = Restituisce se l'argomento raccolta contiene l'argomento oggetto
ilog.rules.brl.Object.isNot(ilog.rules.brl.Object)#documentation = Restituisce se due operandi sono differenti
ilog.rules.brl.Object.isNotIn(ilog.rules.brl.Object[])#sentence.navigation[0].documentation = Restituisce se l'argomento oggetto non appartiene all'argomento raccolta
ilog.rules.brl.Object.isNotIn(ilog.rules.brl.Object[])#sentence.navigation[1].documentation = Restituisce se l'argomento raccolta non contiene l'argomento oggetto
ilog.rules.brl.Object.isNull()#documentation = Restituisce se l'argomento oggetto \u00e8 nullo
ilog.rules.brl.Object.isNotNull()#documentation = Restituisce se l'argomento oggetto non \u00e8 nullo
ilog.rules.brl.Object.count(ilog.rules.brl.Object[])#documentation = Restituisce il numero di elementi nell'argomento raccolta
ilog.rules.brl.Boolean.and(ilog.rules.brl.Boolean)#documentation = Restituisce se entrambe le condizioni sono true
ilog.rules.brl.Boolean.not()#documentation = Restituisce se la condizione racchiusa \u00e8 false
ilog.rules.brl.Boolean.or(ilog.rules.brl.Boolean)#documentation = Restituisce se almeno una condizione \u00e8 true
ilog.rules.brl.String.contains(ilog.rules.brl.String)#documentation = Restituisce se la prima stringa contiene la seconda
ilog.rules.brl.String.doesNotContain(ilog.rules.brl.String)#documentation = Restituisce se la prima stringa non contiene la seconda
ilog.rules.brl.String.doesNotEndWith(ilog.rules.brl.String)#documentation = Restituisce se la fine del primo argomento stringa \u00e8 diversa dal secondo
ilog.rules.brl.String.doesNotStartWith(ilog.rules.brl.String)#documentation = Restituisce se l'inizio del primo argomento stringa \u00e8 diverso dal secondo
ilog.rules.brl.String.endsWith(ilog.rules.brl.String)#documentation = Restituisce se la fine del primo argomento stringa \u00e8 identica al secondo
ilog.rules.brl.String.startsWith(ilog.rules.brl.String)#documentation = Restituisce se l'inizio del primo argomento stringa \u00e8 identico al secondo
ilog.rules.brl.String.isEmpty()#documentation = Restituisce se l'argomento stringa \u00e8 vuoto
ilog.rules.brl.String.isNotEmpty()#documentation = Restituisce se l'argomento stringa non \u00e8 vuoto
ilog.rules.brl.String.length()#documentation = Restituisce il numero di caratteri nella stringa
ilog.rules.brl.String.plus(ilog.rules.brl.String)#documentation = Concatena la seconda stringa alla fine della prima
ilog.rules.brl.String.concat(ilog.rules.brl.String,ilog.rules.brl.Number)#documentation = Concatena l'argomento numero alla fine dell'argomento stringa 
ilog.rules.brl.String.concat(ilog.rules.brl.Number,ilog.rules.brl.String)#documentation = Concatena l'argomento stringa alla fine dell'argomento numero 
ilog.rules.brl.String.concat(ilog.rules.brl.String,ilog.rules.brl.Character)#documentation = Concatena l'argomento carattere alla fine dell'argomento stringa 
ilog.rules.brl.String.concat(ilog.rules.brl.Character,ilog.rules.brl.String)#documentation = Concatena l'argomento stringa alla fine dell'argomento carattere 
ilog.rules.brl.String.contains(ilog.rules.brl.Character)#documentation = Restituisce se la stringa contiene l'argomento carattere
ilog.rules.brl.String.doesNotContain(ilog.rules.brl.Character)#documentation = Restituisce se la stringa non contiene l'argomento carattere 
ilog.rules.brl.String.doesNotEndWith(ilog.rules.brl.Character)#documentation = Restituisce se la stringa non termina con l'argomento carattere 
ilog.rules.brl.String.doesNotStartWith(ilog.rules.brl.Character)#documentation = Restituisce se la stringa non inizia con l'argomento carattere 
ilog.rules.brl.String.endsWith(ilog.rules.brl.Character)#documentation = Restituisce se la stringa termina con l'argomento carattere 
ilog.rules.brl.String.startsWith(ilog.rules.brl.Character)#documentation = Restituisce se l'inizio della stringa \u00e8 l'argomento carattere 
ilog.rules.brl.Number.doesNotEqual(ilog.rules.brl.Number)#documentation = Restituisce se due valori numerici sono differenti
ilog.rules.brl.Number.equals(ilog.rules.brl.Number)#documentation = Restituisce se due valori numerici sono identici
ilog.rules.brl.Number.isBetweenEE(ilog.rules.brl.Number,ilog.rules.brl.Number)#documentation = Restituisce se il primo valore numerico \u00e8 compreso esattamente tra gli altri due
ilog.rules.brl.Number.isBetweenEI(ilog.rules.brl.Number,ilog.rules.brl.Number)#documentation = Restituisce se il primo valore numerico \u00e8 maggiore del secondo e minore o uguale al terzo
ilog.rules.brl.Number.isBetweenIE(ilog.rules.brl.Number,ilog.rules.brl.Number)#documentation = Restituisce se il primo valore numerico \u00e8 maggiore o uguale al secondo e minore del terzo
ilog.rules.brl.Number.isBetweenII(ilog.rules.brl.Number,ilog.rules.brl.Number)#documentation = Restituisce se il primo valore numerico \u00e8 maggiore o uguale al secondo e minore o uguale al terzo
ilog.rules.brl.Number.isGreaterThan(ilog.rules.brl.Number)#documentation = Restituisce se il primo valore numerico \u00e8 maggiore del secondo
ilog.rules.brl.Number.isGreaterThanOrEquals(ilog.rules.brl.Number)#documentation = Restituisce se il primo valore numerico \u00e8 maggiore o uguale al secondo
ilog.rules.brl.Number.isLessThan(ilog.rules.brl.Number)#documentation = Restituisce se il primo valore numerico \u00e8 minore del secondo
ilog.rules.brl.Number.isLessThanOrEquals(ilog.rules.brl.Number)#documentation = Restituisce se il primo valore numerico \u00e8 minore o uguale al secondo
ilog.rules.brl.Number.minus(ilog.rules.brl.Number)#documentation = Restituisce la differenza tra due valori numerici
ilog.rules.brl.Number.mult(ilog.rules.brl.Number)#documentation = Restituisce il prodotto di due valori numerici
ilog.rules.brl.Number.div(ilog.rules.brl.Number)#documentation = Restituisce il quoziente di due valori numerici
ilog.rules.brl.Number.plus(ilog.rules.brl.Number)#documentation = Restituisce la somma di due valori numerici
ilog.rules.brl.Date.after(ilog.rules.brl.Date)#documentation = Restituisce se la prima data \u00e8 successiva alla seconda data
ilog.rules.brl.Date.afterOrEquals(ilog.rules.brl.Date)#documentation = Restituisce se la prima data \u00e8 uguale o successiva alla seconda data
ilog.rules.brl.Date.before(ilog.rules.brl.Date)#documentation = Restituisce se la prima data \u00e8 precedente alla seconda data
ilog.rules.brl.Date.beforeOrEquals(ilog.rules.brl.Date)#documentation = Restituisce se la prima data \u00e8 uguale o precedente alla seconda data
ilog.rules.brl.Date.isAtDate(ilog.rules.brl.Date)#documentation = Restituisce se la prima e la seconda data ricadono nello stesso giorno. L'ora del giorno \u00e8 ignorata.
ilog.rules.brl.Date.isAtDayOfWeek(ilog.rules.brl.DayOfWeek)#documentation = Restituisce se una data ricade in un giorno specificato
ilog.rules.brl.Date.isAtDayTime(ilog.rules.brl.DayOfWeek,ilog.rules.brl.Time)#documentation = Restituisce se una data ricade in un giorno specificato e in un'ora specificata 
ilog.rules.brl.Date.isAtMonth(ilog.rules.brl.Month)#documentation = Restituisce se una data ricade in un mese specificato
ilog.rules.brl.Date.isAtMonthYear(ilog.rules.brl.Month,ilog.rules.brl.Year)#documentation = Restituisce se una data ricade in un mese e anno specificato
ilog.rules.brl.Date.isAtTime(ilog.rules.brl.Time)#documentation = Restituisce se una data ricade in un'ora specificata
ilog.rules.brl.Date.isAtYear(ilog.rules.brl.Year)#documentation = Restituisce se una data ricade in un anno specificato
ilog.rules.brl.Date.isBetweenEE(ilog.rules.brl.Date,ilog.rules.brl.Date)#documentation = Restituisce se la prima data \u00e8 successiva alla seconda data e precedente alla terza data
ilog.rules.brl.Date.isBetweenEI(ilog.rules.brl.Date,ilog.rules.brl.Date)#documentation = Restituisce se la prima data \u00e8 successiva alla seconda data e uguale o precedente alla terza data
ilog.rules.brl.Date.isBetweenIE(ilog.rules.brl.Date,ilog.rules.brl.Date)#documentation = Restituisce se la prima data \u00e8 uguale o successiva alla seconda data e precedente alla terza data
ilog.rules.brl.Date.isBetweenII(ilog.rules.brl.Date,ilog.rules.brl.Date)#documentation = Restituisce se la prima data \u00e8 uguale o successiva alla seconda data e uguale o precedente alla terza data
ilog.rules.brl.Time.after(ilog.rules.brl.Time)#documentation = Restituisce se la prima ora \u00e8 successiva alla seconda ora
ilog.rules.brl.Time.afterOrEquals(ilog.rules.brl.Time)#documentation = Restituisce se la prima ora \u00e8 successiva o uguale alla seconda ora
ilog.rules.brl.Time.before(ilog.rules.brl.Time)#documentation = Restituisce se la prima ora \u00e8 precedente alla seconda ora
ilog.rules.brl.Time.beforeOrEquals(ilog.rules.brl.Time)#documentation = Restituisce se la prima ora \u00e8 precedente o uguale alla seconda ora
ilog.rules.brl.Time.isBetweenEE(ilog.rules.brl.Time,ilog.rules.brl.Time)#documentation = Restituisce se la prima ora \u00e8 compresa esattamente tra la seconda e la terza ora
ilog.rules.brl.Time.isBetweenEI(ilog.rules.brl.Time,ilog.rules.brl.Time)#documentation = Restituisce se la prima ora \u00e8 successiva alla seconda ora e uguale o precedente alla terza ora
ilog.rules.brl.Time.isBetweenIE(ilog.rules.brl.Time,ilog.rules.brl.Time)#documentation = Restituisce se la prima ora \u00e8 uguale o successiva alla seconda ora e precedente alla terza ora
ilog.rules.brl.Time.isBetweenII(ilog.rules.brl.Time,ilog.rules.brl.Time)#documentation = Restituisce se la prima ora \u00e8 uguale o successiva alla seconda ora e uguale o precedente alla terza ora
ilog.rules.brl.DayOfWeek.after(ilog.rules.brl.DayOfWeek)#documentation = Restituisce se il primo giorno \u00e8 successivo al secondo giorno
ilog.rules.brl.DayOfWeek.afterOrEquals(ilog.rules.brl.DayOfWeek)#documentation = Restituisce se il primo giorno \u00e8 successivo o uguale al secondo giorno
ilog.rules.brl.DayOfWeek.before(ilog.rules.brl.DayOfWeek)#documentation = Restituisce se il primo giorno \u00e8 precedente al secondo giorno
ilog.rules.brl.DayOfWeek.beforeOrEquals(ilog.rules.brl.DayOfWeek)#documentation = Restituisce se il primo giorno \u00e8 precedente o uguale al secondo giorno
ilog.rules.brl.DayOfWeek.isBetweenEE(ilog.rules.brl.DayOfWeek,ilog.rules.brl.DayOfWeek)#documentation = Restituisce se il primo giorno \u00e8 compreso esattamente tra il secondo e il terzo giorno
ilog.rules.brl.DayOfWeek.isBetweenEI(ilog.rules.brl.DayOfWeek,ilog.rules.brl.DayOfWeek)#documentation = Restituisce se il primo giorno \u00e8 successivo al secondo giorno e uguale o precedente al terzo giorno
ilog.rules.brl.DayOfWeek.isBetweenIE(ilog.rules.brl.DayOfWeek,ilog.rules.brl.DayOfWeek)#documentation = Restituisce se il primo giorno \u00e8 uguale o successivo al secondo giorno e precedente al terzo giorno
ilog.rules.brl.DayOfWeek.isBetweenII(ilog.rules.brl.DayOfWeek,ilog.rules.brl.DayOfWeek)#documentation = Restituisce se il primo giorno \u00e8 uguale o successivo al secondo giorno e uguale o precedente al terzo giorno
ilog.rules.brl.Month.after(ilog.rules.brl.Month)#documentation = Restituisce se il primo mese \u00e8 successivo al secondo mese
ilog.rules.brl.Month.afterOrEquals(ilog.rules.brl.Month)#documentation = Restituisce se il primo mese \u00e8 successivo o uguale al secondo mese
ilog.rules.brl.Month.before(ilog.rules.brl.Month)#documentation = Restituisce se il primo mese \u00e8 precedente al secondo mese
ilog.rules.brl.Month.beforeOrEquals(ilog.rules.brl.Month)#documentation = Restituisce se il primo mese \u00e8 precedente o uguale al secondo mese
ilog.rules.brl.Month.isBetweenEE(ilog.rules.brl.Month,ilog.rules.brl.Month)#documentation = Restituisce se il primo mese \u00e8 compreso esattamente tra il secondo e il terzo mese
ilog.rules.brl.Month.isBetweenEI(ilog.rules.brl.Month,ilog.rules.brl.Month)#documentation = Restituisce se il primo mese \u00e8 successivo al secondo mese e uguale o precedente al terzo mese
ilog.rules.brl.Month.isBetweenIE(ilog.rules.brl.Month,ilog.rules.brl.Month)#documentation = Restituisce se il primo mese \u00e8 uguale o successivo al secondo mese e precedente al terzo mese
ilog.rules.brl.Month.isBetweenII(ilog.rules.brl.Month,ilog.rules.brl.Month)#documentation = Restituisce se il primo mese \u00e8 uguale o successivo al secondo mese e uguale o precedente al terzo mese
ilog.rules.brl.Year.after(ilog.rules.brl.Year)#documentation = Restituisce se il primo anno \u00e8 successivo al secondo anno
ilog.rules.brl.Year.afterOrEquals(ilog.rules.brl.Year)#documentation = Restituisce se il primo anno \u00e8 successivo o uguale al secondo anno
ilog.rules.brl.Year.before(ilog.rules.brl.Year)#documentation = Restituisce se il primo anno \u00e8 precedente al secondo anno
ilog.rules.brl.Year.beforeOrEquals(ilog.rules.brl.Year)#documentation = Restituisce se il primo anno \u00e8 precedente o uguale al secondo anno
ilog.rules.brl.Year.isBetweenEE(ilog.rules.brl.Year,ilog.rules.brl.Year)#documentation = Restituisce se il primo anno \u00e8 compreso esattamente tra il secondo e il terzo anno
ilog.rules.brl.Year.isBetweenEI(ilog.rules.brl.Year,ilog.rules.brl.Year)#documentation = Restituisce se il primo anno \u00e8 successivo al secondo anno e uguale o precedente al terzo anno
ilog.rules.brl.Year.isBetweenIE(ilog.rules.brl.Year,ilog.rules.brl.Year)#documentation = Restituisce se il primo anno \u00e8 uguale o successivo al secondo anno e precedente al terzo anno
ilog.rules.brl.Year.isBetweenII(ilog.rules.brl.Year,ilog.rules.brl.Year)#documentation = Restituisce se il primo anno \u00e8 uguale o successivo al secondo anno e uguale o precedente al terzo anno
